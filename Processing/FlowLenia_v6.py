import base64
from datetime import datetime
import os
import random
import sys
import time
import timeit
from functools import partial
# import subprocess
# import sys
import cv2

# import cupy

import jax
import jax.numpy as jnp
import jax.scipy as jsp
# import jax.scipy as jsp
import numba as nb
from numba import jit, njit
from numba import int32, float64
from numba.typed import List
from numba.experimental import jitclass

# import pygame as pg
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
import typing as t

from scipy import ndimage
import skimage

from skimage.feature import hog
from skimage import exposure
from skimage.measure import moments, moments_central, moments_normalized, moments_hu

# import os

from models import Models
from objects import World, KernelParameters, ModelParameters
# import models.FlowLeniaModel as FlowLeniaModel
# from models.LeniaModel import LeniaModel

import eel
import pickle


# from jax.config import config
# config.parse_flags_with_absl()
# config.update("jax_enable_x64", True)
# config.update("jax_disable_jit", False)
# config.update("jax_debug_nans", False)
# config.update("jax_disable_pmap", False)
# config.update("jax_platform_name", "cpu")
# config.update("jax_allow_unregistered_dialects", True)



sample_images_path = "web/images/samples"
sample_parameters_path = "web/sample_parameters"



pattern = {}

pattern["fish"] = {"name":"Fish", "version" : "LeniaModel", "R":10,"T":5,"kernels":[
  {"b":[1,5/12,2/3],"m":0.156,"s":0.0118,"h":1,"c0":0,"c1":0, 'r': 1/3},
  {"b":[1/12,1],"m":0.193,"s":0.049,"h":1,"c0":0,"c1":0, 'r': 1/2},
  {"b":[1],"m":0.342,"s":0.0891,"h":1,"c0":0,"c1":0, 'r': 3/3}],
  "cells":[[0,0,0,0,0,0,0,0,0,0,0,0.06,0.1,0.04,0.02,0.01,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.15,0.37,0.5,0.44,0.19,0.23,0.3,0.23,0.15,0.01,0,0,0,0], [0,0,0,0,0,0,0.32,0.78,0.26,0,0.11,0.11,0.1,0.08,0.18,0.16,0.17,0.24,0.09,0,0,0], [0,0,0,0,0.45,0.16,0,0,0,0,0,0.15,0.15,0.16,0.15,0.1,0.09,0.21,0.24,0.12,0,0], [0,0,0,0.1,0,0,0,0,0,0,0,0.17,0.39,0.43,0.34,0.25,0.15,0.16,0.15,0.25,0.03,0], [0,0.15,0.06,0,0,0,0,0,0,0,0.24,0.72,0.92,0.85,0.61,0.47,0.39,0.27,0.12,0.18,0.17,0], [0,0.08,0,0,0,0,0,0,0,0,1.0,1.0,1.0,1.0,0.73,0.6,0.56,0.31,0.12,0.15,0.24,0.01], [0,0.16,0,0,0,0,0,0,0,0.76,1.0,1.0,1.0,1.0,0.76,0.72,0.65,0.39,0.1,0.17,0.24,0.05], [0,0.05,0,0,0,0,0,0,0.21,0.83,1.0,1.0,1.0,1.0,0.86,0.85,0.76,0.36,0.17,0.13,0.21,0.07], [0,0.05,0,0,0.02,0,0,0,0.4,0.91,1.0,1.0,1.0,1.0,1.0,0.95,0.79,0.36,0.21,0.09,0.18,0.04], [0.06,0.08,0,0.18,0.21,0.1,0.03,0.38,0.92,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.64,0.31,0.12,0.07,0.25,0], [0.05,0.12,0.27,0.4,0.34,0.42,0.93,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.97,0.33,0.16,0.05,0.1,0.26,0], [0,0.25,0.21,0.39,0.99,1.0,1.0,1.0,1.0,1.0,1.0,0.86,0.89,0.94,0.83,0.13,0,0,0.04,0.21,0.18,0], [0,0.06,0.29,0.63,0.84,0.97,1.0,1.0,1.0,0.96,0.46,0.33,0.36,0,0,0,0,0,0.03,0.35,0,0], [0,0,0.13,0.22,0.59,0.85,0.99,1.0,0.98,0.25,0,0,0,0,0,0,0,0,0.34,0.14,0,0], [0,0,0,0,0.33,0.7,0.95,0.8,0.33,0.11,0,0,0,0,0,0,0,0.11,0.26,0,0,0], [0,0,0,0,0.16,0.56,0.52,0.51,0.4,0.18,0.01,0,0,0,0,0,0,0.42,0,0,0,0], [0,0,0,0,0.01,0,0.33,0.47,0.33,0.05,0,0,0,0,0,0,0.35,0,0,0,0,0], [0,0,0,0,0,0.26,0.32,0.13,0,0,0,0,0,0,0,0.34,0,0,0,0,0,0], [0,0,0,0,0,0.22,0.25,0.03,0,0,0,0,0,0,0.46,0,0,0,0,0,0,0], [0,0,0,0,0,0,0.09,0.2,0.22,0.23,0.23,0.22,0.3,0.3,0,0,0,0,0,0,0,0]]
}


pattern["Orb"] = {"name":"Orb(s)", "version" : "LeniaModel", 'R':18, 'T':10, "kernels": [{'b':[1], 'm':0.13, 's':0.013, 'h':1, 'r':1, "c0":0, "c1":0}],
		"cells": [[[0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.03,0,0,0.13,0.03,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.14,0,0,0.13,0.14,0,0,0,0,0,0,0,0,0.07,0,0,0,0],
		[0,0,0,0,0,0,0,0.03,0.20,0.08,0.04,0.19,0.27,0.06,0.04,0.05,0.05,0.03,0,0,0,0.14,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.27,0.26,0.17,0.28,0.38,0.27,0.14,0.14,0.14,0.13,0.09,0.05,0,0.04,0,0,0,0],
		[0,0,0,0,0,0,0.05,0.09,0.33,0.43,0.29,0.34,0.46,0.35,0.16,0.15,0.14,0.14,0.15,0.15,0.10,0,0.34,0,0,0],
		[0,0,0,0,0.04,0.09,0.13,0.16,0.34,0.47,0.35,0.31,0.44,0.32,0.08,0.05,0.03,0.03,0.06,0.11,0.17,0.13,0.56,0,0,0],
		[0,0,0,0.05,0.12,0.14,0.16,0.15,0.27,0.39,0.30,0.21,0.30,0.26,0.07,0,0,0,0,0,0.08,0.19,0.56,0,0,0],
		[0.10,0,0.02,0.12,0.15,0.11,0.07,0.05,0.13,0.27,0.25,0.12,0.18,0.28,0.18,0,0,0,0,0,0,0.08,0.38,0.28,0,0],
		[0.33,0,0.09,0.15,0.09,0.02,0,0,0,0.23,0.27,0.10,0.13,0.35,0.27,0,0,0,0,0,0,0,0.14,0.69,0,0],
		[0.35,0.03,0.14,0.13,0.01,0,0,0,0,0.27,0.35,0.15,0.15,0.36,0.39,0.10,0,0,0,0,0,0,0,0.77,0,0],
		[0.16,0.17,0.18,0.06,0,0,0,0,0,0.33,0.46,0.27,0.23,0.41,0.54,0.35,0,0,0,0,0,0,0,0.49,0.11,0],
		[0,0.47,0.17,0,0,0,0,0,0,0.39,0.55,0.46,0.36,0.50,0.66,0.59,0,0,0,0,0,0,0,0.18,0.40,0],
		[0,0.71,0.14,0,0,0,0,0,0,0.32,0.64,0.67,0.53,0.60,0.79,0.73,0.16,0,0,0,0,0,0,0.02,0.47,0],
		[0,0.75,0.09,0,0,0,0,0,0,0.22,0.72,0.83,0.69,0.70,0.91,0.86,0.48,0,0,0,0,0,0,0,0.41,0],
		[0,0.59,0.08,0,0,0,0,0,0,0.12,0.80,0.92,0.83,0.77,0.94,0.97,0.80,0.04,0,0,0,0,0,0,0.33,0.01],
		[0,0.30,0.31,0,0,0,0,0,0,0.04,0.87,0.99,0.91,0.75,0.86,1.00,1.00,0.35,0,0,0,0,0,0.03,0.28,0.03],
		[0,0.02,0.50,0,0,0,0,0,0,0,0.81,1.00,0.89,0.64,0.68,0.95,1.00,0.62,0.03,0,0,0,0,0.07,0.24,0.03],
		[0,0,0.53,0,0,0,0,0,0,0,0.73,1.00,0.84,0.56,0.54,0.75,0.99,0.77,0.23,0,0,0,0,0.12,0.21,0.01],
		[0,0,0.37,0.15,0,0,0,0,0,0,0.60,1.00,0.81,0.55,0.50,0.64,0.86,0.78,0.37,0.08,0,0,0.06,0.17,0.16,0],
		[0,0,0.13,0.29,0,0,0,0,0,0,0.48,0.89,0.81,0.60,0.52,0.60,0.76,0.73,0.45,0.19,0.08,0.07,0.13,0.19,0.09,0],
		[0,0,0,0.28,0.13,0,0,0,0,0.03,0.37,0.73,0.79,0.65,0.57,0.61,0.69,0.64,0.45,0.26,0.16,0.15,0.17,0.17,0.03,0],
		[0,0,0,0.12,0.23,0.09,0,0,0,0.08,0.29,0.57,0.70,0.66,0.60,0.59,0.61,0.55,0.43,0.29,0.22,0.21,0.19,0.09,0,0],
		[0,0,0,0,0.17,0.19,0.10,0.06,0.06,0.12,0.25,0.43,0.56,0.58,0.55,0.53,0.52,0.46,0.38,0.30,0.25,0.21,0.13,0.01,0,0],
		[0,0,0,0,0.02,0.17,0.19,0.16,0.14,0.18,0.24,0.34,0.43,0.47,0.46,0.44,0.42,0.37,0.32,0.26,0.21,0.14,0.04,0,0,0],
		[0,0,0,0,0,0.02,0.14,0.19,0.20,0.22,0.25,0.30,0.34,0.36,0.36,0.35,0.33,0.29,0.24,0.18,0.12,0.04,0,0,0,0],
		[0,0,0,0,0,0,0,0.08,0.16,0.19,0.22,0.25,0.26,0.27,0.26,0.25,0.23,0.19,0.14,0.08,0.03,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.03,0.07,0.11,0.14,0.16,0.16,0.15,0.14,0.11,0.07,0.04,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0.03,0.04,0.05,0.04,0.04,0.02,0,0,0,0,0,0,0,0,0]]]
	}


pattern["Spinner"] = {"name":"Spinner", "version" : "LeniaModel", "R":10, 'T':10, "kernels":[{'b':[1,1,1],'m':0.25,'s':0.034,'h':1,'r':1,"c0":0,"c1":0}],
		"cells":[[[0,0,0,0,0,0,0,0,0,0.01,0.05,0.04,0.01,0.01,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0.01,0.19,0.43,0.58,0.65,0.78,0.79,0.43,0.02,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0.19,0.55,1.00,1.00,1.00,1.00,1.00,1.00,0.70,0.02,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0.29,0.87,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.25,0,0,0,0,0,0,0],
		[0,0,0,0,0,0.26,0.88,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.13,0,0,0,0,0,0],
		[0,0,0,0,0.04,0.49,0.97,1.00,1.00,0.94,0.94,1.00,1.00,1.00,1.00,1.00,1.00,0.87,0,0,0,0,0,0],
		[0,0,0,0,0.05,0.48,1.00,0.99,0.92,0.81,0.72,0.88,0.92,1.00,1.00,1.00,1.00,1.00,0.38,0,0,0,0,0],
		[0,0,0,0,0.18,1.00,0.97,0.53,0.26,0.16,0.03,0.09,0,0.30,1.00,1.00,1.00,1.00,0.59,0,0,0,0,0],
		[0,0,0,0.03,0.55,1.00,0.78,0.40,0.13,0,0,0,0,0,0,0.50,1.00,1.00,0.64,0,0,0,0,0],
		[0,0,0,0.19,0.67,0.98,0.93,0.53,0,0,0,0,0,0,0,0.01,0.67,0.86,0.29,0,0,0,0,0],
		[0,0,0.02,0.26,0.61,0.97,0.77,0.03,0,0,0,0,0,0,0,0.09,0.58,0.32,0,0,0,0,0,0],
		[0,0,0.12,0.21,0.59,0.71,0.34,0,0,0,0,0,0,0,0,0.19,0.37,0.04,0,0,0,0,0,0],
		[0,0.01,0.13,0.28,0.61,0.56,0.57,0.55,0,0,0,0,0,0,0,0.19,0.32,0,0,0,0,0,0,0],
		[0,0.01,0.12,0.37,0.64,0.91,1.00,0.66,0,0,0,0,0,0,0,0.33,0.25,0,0,0,0,0,0,0],
		[0,0.03,0.15,0.47,0.79,1.00,0.82,0.19,0,0,0,0,0,0,0.15,0.32,0.07,0,0,0,0,0,0,0],
		[0,0.08,0.24,0.57,0.91,1.00,0.86,0.46,0.43,0.73,0,0,0,0,0.25,0.23,0,0,0,0,0,0,0,0],
		[0,0.12,0.30,0.62,0.87,1.00,1.00,0.91,0.82,0.45,0,0,0.03,0.13,0.30,0.29,0.12,0,0,0,0,0,0,0],
		[0.01,0.14,0.30,0.60,0.75,0.92,0.89,0.66,0.38,0.04,0,0.31,0.85,0.38,0.20,0.41,0.81,0.30,0,0,0,0,0,0],
		[0.01,0.17,0.32,0.59,0.72,0.91,0.96,0.81,0.63,0.70,0.77,0.35,0,0,0.01,0.23,0.30,0.20,0,0,0,0,0,0],
		[0.01,0.16,0.38,0.63,0.75,1.00,1.00,0.96,0.85,0.76,0.39,0,0,0,0,0.04,0.17,0.21,0.02,0,0,0,0,0],
		[0,0.13,0.42,0.64,0.76,0.93,0.95,0.82,0.43,0.06,0,0,0,0,0,0,0.14,0.21,0.10,0.01,0,0,0,0],
		[0,0.08,0.38,0.62,0.75,0.88,0.86,0.78,0.52,0.14,0.15,0.18,0.01,0,0,0,0.21,0.31,0.26,0.12,0,0,0,0],
		[0,0.02,0.30,0.53,0.68,0.86,0.80,0.91,0.85,0.46,0.30,0.06,0,0,0,0.07,0.27,0.37,0.36,0.23,0,0,0,0],
		[0,0,0.16,0.43,0.58,0.83,0.67,0.65,0.59,0.32,0.29,0,0,0,0.03,0.15,0.25,0.32,0.29,0.19,0,0,0,0],
		[0,0,0.02,0.24,0.43,0.76,0.78,0.77,0.59,0.34,0.45,0.37,0,0.09,0.19,0.12,0.24,0.27,0.19,0.17,0,0,0.07,0],
		[0,0,0,0.02,0.19,0.57,0.79,0.93,1.00,0.72,0.67,0.56,0.07,0.01,0.06,0.14,0.59,0.94,0.61,0.28,0.47,0.33,0.21,0.01],
		[0,0,0,0,0,0.27,0.61,0.74,0.92,0.83,0.74,0.62,0.33,0.57,1.00,1.00,1.00,0.94,0.87,0.73,0.48,0.31,0.16,0],
		[0,0,0,0,0,0,0.23,0.47,0.69,0.88,1.00,1.00,1.00,1.00,1.00,1.00,0.97,0.89,0.78,0.60,0.39,0.25,0.01,0],
		[0,0,0,0,0,0,0,0,0.09,0.38,0.58,0.70,1.00,1.00,1.00,0.98,0.87,0.72,0.55,0.34,0.22,0.04,0,0],
		[0,0,0,0,0,0,0,0,0,0,0.04,0.12,0.29,0.61,0.66,0.39,0,0,0,0,0,0,0,0]]]
	}


pattern["Self-Replicator"] = {"name":"Self-replicator", "version" : "LeniaModel",'R':10, 'T':10, "kernels":[
		{'b':[1,5/12,3/4],'m':0.179,'s':0.0313,	'h':1,'r':1,	"c0":0,"c1":0},
		{'b':[3/4,1],		'm':0.235,'s':0.0671,	'h':1,'r':1,	"c0":0,"c1":0},
		{'b':[1],			'm':0.329,'s':0.044,	'h':1,'r':1,	"c0":0,"c1":0},
		{'b':[1,0,1/4],	'm':0.273,'s':0.0431,	'h':1,'r':1,	"c0":1,"c1":1},
		{'b':[5/12,1],	'm':0.335,'s':0.067,	'h':1,'r':1,	"c0":1,"c1":1},
		{'b':[1],			'm':0.532,'s':0.1051,	'h':1,'r':1,	"c0":1,"c1":1},
		{'b':[1,0,1/2],	'm':0.244,'s':0.01, 	'h':1,'r':1,	"c0":2,"c1":2},
		{'b':[0,1],		'm':0.133,'s':0.0894,	'h':1,'r':1,	"c0":2,"c1":2},
		{'b':[1],			'm':0.292,'s':0.1006,	'h':1,'r':1,	"c0":2,"c1":2},
		{'b':[1/3,1],		'm':0.197,'s':0.0646,	'h':1,'r':1,	"c0":0,"c1":1},
		{'b':[1],			'm':0.651,'s':0.1282,	'h':1,'r':1,	"c0":1,"c1":0},
		{'b':[1/3,1],		'm':0.29,'s':0.0673,	'h':1,'r':1,	"c0":1,"c1":2},
		{'b':[1],			'm':0.232,'s':0.0956,	'h':1,'r':1,	"c0":2,"c1":1},
		{'b':[1/6,1],		'm':0.27,'s':0.0405,	'h':1,'r':1,	"c0":2,"c1":0},
		{'b':[1],			'm':0.36,'s':0.0955,	'h':1,'r':1,	"c0":0,"c1":2}],
		"cells":[[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0.07,0.17,0.05,0.38,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.73,0.76,0.47,0.65,0,0,0,1.00,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.69,0.61,0.51,0.38,0,0.22,0.29,0.73,0.02,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0.97,0.41,0.11,0.17,0.88,1.00,1.00,0.52,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,1.00,0.32,0.02,0.02,0.74,0.95,1.00,1.00,0.16,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0.27,1.00,0.08,0.20,0.63,0.82,0.94,1.00,1.00,0.08,0.17,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0.03,0.04,0.04,0.69,1.00,0.43,0.55,0.80,0.93,1.00,1.00,0.62,0.31,0.03,0,0,0,0,0],
		[0,0,0,0,0,0,0,1.00,0.53,0.02,0,1.00,0.99,0.75,0.89,0.98,1.00,1.00,1.00,0.12,0.02,0,0,0,0,0],
		[0,0,0,0,0,0,0,0.26,0.65,0.35,0.53,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.11,0.02,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0.72,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.07,0.01,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0.64,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.98,0.04,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.02,0.03,0.32,0.79,1.00,1.00,1.00,1.00,1.00,1.00,0.34,0.01,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0.10,0.10,0.50,0.95,0.77,0.69,0.79,0.46,0.06,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.09,0.27,0.29,0.09,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
		[[0,0,0,0,0,0,0,0,0,0.04,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0.40,0.64,0,0,0.97,0.01,0,1.00,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0.18,0.08,0,0.21,0.91,0.69,0.25,0,0.41,0.63,0.53,0.64,1.00,0.91,0.09,0,0,0,0,0,0,0],
		[0,0,0,0,0.22,0.49,0,0,0.02,0.44,0.98,0.66,1.00,1.00,1.00,1.00,1.00,0.08,0.88,0.35,0.21,0.02,0,0,0,0],
		[0,0,0,0.19,0.41,0.47,0.44,0.46,0.35,0.54,1.00,0.93,1.00,1.00,1.00,1.00,1.00,0.78,0.65,0.83,0.62,0.45,0.14,0,0,0],
		[0,0,0.10,0.51,0.19,0.38,0.77,1.00,0.71,0.60,0.57,0.46,0.41,1.00,0.93,0.92,1.00,1.00,1.00,1.00,1.00,0.77,0.53,0.11,0,0],
		[0,0.17,0.55,0.10,0.20,0.55,0.93,1.00,1.00,0.86,0.25,0.07,0,0,0,0.73,1.00,1.00,1.00,1.00,1.00,1.00,0.71,0.29,0,0],
		[0,0.43,0.61,0.38,0.40,0.76,1.00,1.00,1.00,1.00,0.15,0,0,0,0,0.27,0.80,0.99,1.00,1.00,1.00,1.00,0.77,0.44,0.07,0],
		[0,0.37,0.67,0.69,0.86,0.98,0.99,1.00,1.00,1.00,0.07,0,0,0,0,0,0.40,0.81,1.00,1.00,1.00,1.00,0.82,0.55,0.19,0],
		[0,0,0.86,0.82,0.95,1.00,1.00,1.00,0.85,0.65,0.01,0,0,0,0,0,0.12,0.68,0.97,1.00,1.00,1.00,0.93,0.65,0.33,0.01],
		[0,0,0.53,0.95,1.00,1.00,1.00,1.00,0.58,0.23,0,0,0,0,0,0,0,0.68,0.95,1.00,1.00,1.00,1.00,0.78,0.44,0.06],
		[0.21,0,0,0.98,1.00,1.00,1.00,1.00,0.04,0,0,0,0,0,0,0,0,0.69,0.96,1.00,1.00,1.00,1.00,0.89,0.47,0.10],
		[0,0.67,0,0.52,1.00,1.00,1.00,1.00,0.19,0,0,0,0,0,0,0,0.25,0.83,1.00,1.00,1.00,1.00,1.00,0.84,0.43,0.07],
		[0,0,0.31,0.49,1.00,1.00,1.00,1.00,0.80,0,0,0.42,0.06,0,0,0.31,0.71,0.97,1.00,1.00,1.00,1.00,1.00,0.71,0.36,0.02],
		[0,0,0,0,1.00,1.00,1.00,1.00,1.00,0.93,0.70,0.84,0.95,0.86,0.85,0.91,0.98,1.00,1.00,1.00,1.00,1.00,0.91,0.56,0.24,0],
		[0,0,0,0.24,0.98,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.68,0.41,0.07,0],
		[0,0,0,0.28,0.32,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.74,0.48,0.19,0,0],
		[0,0,0,0,0,0.16,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.99,0.72,0.48,0.24,0.01,0,0],
		[0,0,0,0,0,0.25,0.50,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.94,0.61,0.43,0.23,0.02,0,0,0],
		[0,0,0,0,0,0,0.29,0.62,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.84,0.68,0.53,0.35,0.16,0,0,0,0,0],
		[0,0,0,0,0,0,0,0.21,0.45,0.53,0.61,0.71,0.77,0.75,0.66,0.57,0.49,0.42,0.31,0.06,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0.15,0.31,0.41,0.45,0.43,0.39,0.33,0.22,0.10,0.01,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.04,0.03,0,0,0,0,0,0,0,0,0,0,0]],
		[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.02,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.80,0.48,0.01,0,0.07,0.12,0.04,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,1.00,0.54,1.00,1.00,0.74,0.26,0.24,0.30,0.19,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0.12,0.43,0,0,0.76,1.00,1.00,1.00,1.00,1.00,0.35,0.11,0,0,0],
		[0.05,0,0,0,0,0,0,0,0,0,0,0.31,0.05,0,0,0.36,1.00,1.00,1.00,1.00,1.00,0.45,0.29,0,0,0],
		[0,0,0,0,0,0,0,0.70,0,0,0.62,0.05,0,0,0,0,0.96,1.00,1.00,1.00,1.00,0.49,0.47,0.09,0,0],
		[0,0,0,0,0,0,0,0.65,0.69,0,0.11,0.16,0,0,0,0,0.67,1.00,1.00,1.00,1.00,0.50,0.57,0.23,0,0],
		[0,0,0,0,0,0,0.51,0.78,0.79,0,0,0,0,0,0,0,0.37,0.96,1.00,1.00,1.00,0.58,0.59,0.39,0.02,0],
		[0,0,0,0,0,0,0.58,0.87,0.90,0.75,0,0,0,0,0,0,0,0.54,1.00,1.00,1.00,0.63,0.63,0.45,0.01,0],
		[0,0,0,0,0.04,0.02,0.24,0.91,0.89,1.00,0.80,0,0,0,0,0,0,0.69,1.00,1.00,1.00,0.76,0.67,0.40,0,0],
		[0,0,0,0,0,0,0.33,0.71,0.61,0.96,1.00,0.67,0,0,0,0,0,0.66,0.98,1.00,1.00,0.84,0.49,0.23,0,0],
		[0,0,0,0,0,0,0.09,0.55,0.69,0.87,1.00,1.00,0.17,0,0,0,0,0.62,0.95,1.00,0.93,0.65,0.31,0.11,0,0],
		[0,0,0,0,0,0,0,0.28,0.70,0.71,1.00,1.00,0.40,0,0.61,0.38,0.06,0.33,0.57,0.83,0.72,0.27,0.15,0.02,0,0],
		[0,0,0,0,0,0,0,0,0.67,0.95,0.97,1.00,0.56,0.55,0.62,0.48,0.75,0.28,0.37,0.74,0.25,0.13,0.04,0,0,0],
		[0,0,0,0,0,0,0,0.05,0.36,0.85,1.00,0.93,0.81,0.73,0.30,0.05,0,0.12,0.22,0.18,0.10,0.02,0,0,0,0],
		[0,0,0,0,0,0,0,0.05,0.24,0.34,0.23,0.02,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0.07,0.06,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]]
	}

pattern["Star"] = {"name":"Star", "version" : "LeniaModel", 'R':17, 'T':10, "kernels":[{'b':[2/3,0,1],'m':0.31,'s':0.035,'h':1,'r':1,"c0":0,"c1":0}],
        "cells":[[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.04,0,0,0,0,0,0,0,0,0,0],
    	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.49,0.77,1.00,1.00,0.90,0.35,0,0,0,0,0,0,0,0],
    	[0,0,0,0,0,0,0,0,0,0,0,0,0,0.09,0.95,1.00,1.00,1.00,1.00,1.00,0.94,0,0,0,0,0,0,0],
    	[0,0,0,0,0.28,0.51,0.30,0,0,0,0,0,0,0.29,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.52,0,0,0,0,0,0],
    	[0,0,0,0.76,1.00,1.00,0.91,0.55,0.38,0,0,0.04,0.60,0.87,1.00,1.00,1.00,0.99,1.00,1.00,1.00,0.53,0,0,0,0,0,0],
    	[0,0,0.60,1.00,1.00,1.00,1.00,1.00,1.00,0.70,0.73,0.82,1.00,1.00,1.00,1.00,0.87,0.78,0.97,1.00,1.00,0.40,0,0,0,0,0,0],
    	[0,0.11,1.00,1.00,1.00,1.00,1.00,1.00,0.34,0.31,0.41,0.61,0.99,1.00,1.00,0.99,0.61,0.33,0.36,1.00,1.00,0.40,0,0,0,0,0,0],
    	[0,0.65,1.00,1.00,1.00,0.95,0.80,0.40,0,0.03,0.32,0.80,1.00,1.00,1.00,1.00,0.55,0.03,0,0.10,0.73,0.23,0,0,0,0,0,0],
    	[0,0.81,1.00,1.00,1.00,0.90,0.65,0.35,0.20,0.78,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.53,0,0.06,0.52,0.51,0,0,0,0,0,0],
    	[0,0.51,1.00,1.00,1.00,0.99,0.83,0.79,1.00,1.00,1.00,1.00,1.00,1.00,0.92,0.83,1.00,1.00,1.00,0.19,0.41,0.80,0.06,0,0,0,0,0],
    	[0,0.32,0.56,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.92,0.42,0.30,0.50,1.00,1.00,1.00,1.00,0.53,0.92,0.75,0.10,0,0,0,0],
    	[0,0,0.03,0.60,1.00,1.00,1.00,1.00,1.00,0.61,0.51,0.61,0.53,0.42,0.41,0.49,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.62,0.46,0.77,0.02,0],
    	[0,0,0,0.54,1.00,1.00,1.00,1.00,1.00,0.44,0.45,0.70,1.00,1.00,1.00,0.77,0.58,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.94,0.03],
    	[0,0,0,0.32,0.85,0.79,1.00,1.00,1.00,0.47,0.43,1.00,0.99,0.87,1.00,1.00,0.47,0.44,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.44],
    	[0,0,0,0.51,0.67,0.55,1.00,1.00,1.00,0.60,0.59,1.00,0.75,0.51,0.86,1.00,0.56,0.39,0.57,1.00,1.00,0.95,0.91,0.97,1.00,1.00,1.00,0.84],
    	[0,0,0.11,0.68,0.43,0.28,1.00,1.00,1.00,0.76,0.63,1.00,0.96,0.77,1.00,1.00,0.59,0.43,0.78,1.00,0.95,0.53,0.65,0.86,0.98,1.00,1.00,1.00],
    	[0,0.04,0.62,0.80,0.17,0.03,1.00,1.00,1.00,0.52,0.47,0.62,1.00,1.00,1.00,0.65,0.50,1.00,1.00,1.00,0.66,0.02,0.36,0.91,1.00,1.00,1.00,1.00],
    	[0.01,0.41,1.00,1.00,0.19,0.03,0.86,1.00,1.00,0.58,0.35,0.29,0.46,0.56,0.49,0.31,0.73,1.00,1.00,1.00,0.23,0,0.16,1.00,1.00,1.00,1.00,0.62],
    	[0.37,0.95,1.00,1.00,0.66,0.41,0.75,1.00,1.00,1.00,1.00,0.93,0.66,0.31,0.39,0.38,1.00,1.00,1.00,1.00,0.15,0.14,0.57,1.00,1.00,0.92,0.65,0],
    	[0.67,1.00,1.00,1.00,0.82,0.68,0.83,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.58,1.00,1.00,1.00,1.00,0.57,0.39,0.62,0.57,0.60,0.32,0.23,0.15,0],
    	[0.45,1.00,1.00,1.00,0.95,0.93,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.76,0.78,0.49,0,0.03,0,0,0,0],
    	[0,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.78,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.51,0,0,0,0,0,0,0],
    	[0,0.34,1.00,1.00,1.00,1.00,1.00,0.99,1.00,0.90,0.53,0.26,0.10,0.28,0.49,0.78,0.99,1.00,1.00,0.88,0.25,0,0,0,0,0,0,0],
    	[0,0,0.45,1.00,1.00,1.00,0.56,0.30,0.51,0.58,0.76,0.44,0.07,0,0.29,0.60,0.90,1.00,1.00,0.66,0.04,0,0,0,0,0,0,0],
    	[0,0,0,0.07,0.33,0.63,0.07,0,0,0,0.20,0.72,0.69,0.73,0.78,0.78,0.93,1.00,1.00,1.00,0.29,0,0,0,0,0,0,0],
    	[0,0,0,0,0,0,0,0,0,0,0.02,0.46,1.00,1.00,1.00,0.99,0.98,1.00,1.00,0.99,0.32,0,0,0,0,0,0,0],
    	[0,0,0,0,0,0,0,0,0,0,0,0,0.53,1.00,1.00,1.00,1.00,1.00,1.00,0.95,0.02,0,0,0,0,0,0,0],
    	[0,0,0,0,0,0,0,0,0,0,0,0,0.18,0.81,1.00,1.00,1.00,1.00,1.00,0.14,0,0,0,0,0,0,0,0],
    	[0,0,0,0,0,0,0,0,0,0,0,0,0,0.32,0.77,1.00,0.70,0.19,0.04,0,0,0,0,0,0,0,0,0]]]
    }


# pattern["aquarium"] = {"name":"Tessellatium gyrans", "version" : "LeniaModel","R":12,"T":2,"kernels":[
# {"b":[1],"m":0.272,"s":0.0595,"h":0.138,"r":0.91,"c0":0,"c1":0},
# {"b":[1],"m":0.349,"s":0.1585,"h":0.48,"r":0.62,"c0":0,"c1":0},
# {"b":[1,1/4],"m":0.2,"s":0.0332,"h":0.284,"r":0.5,"c0":0,"c1":0},
# {"b":[0,1],"m":0.114,"s":0.0528,"h":0.256,"r":0.97,"c0":1,"c1":1},
# {"b":[1],"m":0.447,"s":0.0777,"h":0.5,"r":0.72,"c0":1,"c1":1},
# {"b":[5/6,1],"m":0.247,"s":0.0342,"h":0.622,"r":0.8,"c0":1,"c1":1},
# {"b":[1],"m":0.21,"s":0.0617,"h":0.35,"r":0.96,"c0":2,"c1":2},
# {"b":[1],"m":0.462,"s":0.1192,"h":0.218,"r":0.56,"c0":2,"c1":2},
# {"b":[1],"m":0.446,"s":0.1793,"h":0.556,"r":0.78,"c0":2,"c1":2},
# {"b":[11/12,1],"m":0.327,"s":0.1408,"h":0.344,"r":0.79,"c0":0,"c1":1},
# {"b":[3/4,1],"m":0.476,"s":0.0995,"h":0.456,"r":0.5,"c0":0,"c1":2},
# {"b":[11/12,1],"m":0.379,"s":0.0697,"h":0.67,"r":0.72,"c0":1,"c1":0},
# {"b":[1],"m":0.262,"s":0.0877,"h":0.42,"r":0.68,"c0":1,"c1":2},
# {"b":[1/6,1,0],"m":0.412,"s":0.1101,"h":0.43,"r":0.82,"c0":2,"c1":0},
# {"b":[1],"m":0.201,"s":0.0786,"h":0.278,"r":0.82,"c0":2,"c1":1}],
# "cells":[
# [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.04,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0.49,1.0,0,0.03,0.49,0.49,0.28,0.16,0.03,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.6,0.47,0.31,0.58,0.51,0.35,0.28,0.22,0,0,0,0,0], [0,0,0,0,0,0,0.15,0.32,0.17,0.61,0.97,0.29,0.67,0.59,0.88,1.0,0.92,0.8,0.61,0.42,0.19,0,0,0], [0,0,0,0,0,0,0,0.25,0.64,0.26,0.92,0.04,0.24,0.97,1.0,1.0,1.0,1.0,0.97,0.71,0.33,0.12,0,0], [0,0,0,0,0,0,0,0.38,0.84,0.99,0.78,0.67,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.95,0.62,0.37,0,0], [0,0,0,0,0.04,0.11,0,0.69,0.75,0.75,0.91,1.0,1.0,0.89,1.0,1.0,1.0,1.0,1.0,1.0,0.81,0.42,0.07,0], [0,0,0,0,0.44,0.63,0.04,0,0,0,0.11,0.14,0,0.05,0.64,1.0,1.0,1.0,1.0,1.0,0.92,0.56,0.23,0], [0,0,0,0,0.11,0.36,0.35,0.2,0,0,0,0,0,0,0.63,1.0,1.0,1.0,1.0,1.0,0.96,0.49,0.26,0], [0,0,0,0,0,0.4,0.37,0.18,0,0,0,0,0,0.04,0.41,0.52,0.67,0.82,1.0,1.0,0.91,0.4,0.23,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.04,0,0.05,0.45,0.89,1.0,0.66,0.35,0.09,0], [0,0,0.22,0,0,0,0.05,0.36,0.6,0.13,0.02,0.04,0.24,0.34,0.1,0,0.04,0.62,1.0,1.0,0.44,0.25,0,0], [0,0,0,0.43,0.53,0.58,0.78,0.9,0.96,1.0,1.0,1.0,1.0,0.71,0.46,0.51,0.81,1.0,1.0,0.93,0.19,0.06,0,0], [0,0,0,0,0.23,0.26,0.37,0.51,0.71,0.89,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.42,0.06,0,0,0], [0,0,0,0,0.03,0,0,0.11,0.35,0.62,0.81,0.93,1.0,1.0,1.0,1.0,1.0,0.64,0.15,0,0,0,0,0], [0,0,0,0,0,0,0.06,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.05,0.09,0.05,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
# [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0.28,0.42,0.44,0.34,0.18,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.34,1.0,1.0,1.0,1.0,1.0,0.91,0.52,0.14,0], [0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.17,0.75,1.0,1.0,1.0,1.0,1.0,1.0,0.93,0.35,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.22,0.92,1.0,1.0,1.0,1.0,1.0,1.0,0.59,0.09], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.75,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.71,0.16], [0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.67,0.83,0.85,1.0,1.0,1.0,1.0,1.0,1.0,0.68,0.17], [0,0,0,0,0,0,0,0,0,0,0,0,0.21,0.04,0.12,0.58,0.95,1.0,1.0,1.0,1.0,1.0,0.57,0.13], [0,0,0,0,0,0,0,0,0,0,0,0.07,0,0,0,0.2,0.64,0.96,1.0,1.0,1.0,0.9,0.24,0.01], [0,0,0,0,0,0,0,0,0,0,0.13,0.29,0,0,0,0.25,0.9,1.0,1.0,1.0,1.0,0.45,0.05,0], [0,0,0,0,0,0,0,0,0,0,0.13,0.31,0.07,0,0.46,0.96,1.0,1.0,1.0,1.0,0.51,0.12,0,0], [0,0,0,0,0,0,0,0,0.26,0.82,1.0,0.95,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.3,0.05,0,0,0], [0,0,0,0,0,0,0,0,0.28,0.74,1.0,0.95,0.87,1.0,1.0,1.0,1.0,1.0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.07,0.69,1.0,1.0,1.0,1.0,1.0,0.96,0.25,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.4,0.72,0.9,0.83,0.7,0.56,0.43,0.14,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
# [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0.04,0.25,0.37,0.44,0.37,0.24,0.11,0.04,0,0,0,0], [0,0,0,0,0,0,0,0,0,0.19,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.75,0.4,0.15,0,0,0,0], [0,0,0,0,0,0,0,0,0.14,0.48,0.83,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.4,0,0,0,0], [0,0,0,0,0,0,0,0,0.62,0.78,0.94,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.64,0,0,0,0], [0,0,0,0,0,0,0,0.02,0.65,0.98,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.78,0,0,0,0], [0,0,0,0,0,0,0,0.15,0.48,0.93,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.79,0.05,0,0,0], [0,0,0,0,0,0,0.33,0.56,0.8,1.0,1.0,1.0,0.37,0.6,0.94,1.0,1.0,1.0,1.0,0.68,0.05,0,0,0], [0,0,0,0,0.35,0.51,0.76,0.89,1.0,1.0,0.72,0.15,0,0.29,0.57,0.69,0.86,1.0,0.92,0.49,0,0,0,0], [0,0,0,0,0,0.38,0.86,1.0,1.0,0.96,0.31,0,0,0,0,0.02,0.2,0.52,0.37,0.11,0,0,0,0], [0,0,0.01,0,0,0.07,0.75,1.0,1.0,1.0,0.48,0.03,0,0,0,0,0,0.18,0.07,0,0,0,0,0], [0,0.11,0.09,0.22,0.15,0.32,0.71,0.94,1.0,1.0,0.97,0.54,0.12,0.02,0,0,0,0,0,0,0,0,0,0], [0.06,0.33,0.47,0.51,0.58,0.77,0.95,1.0,1.0,1.0,1.0,0.62,0.12,0,0,0,0,0,0,0,0,0,0,0], [0.04,0.4,0.69,0.88,0.95,1.0,1.0,1.0,1.0,1.0,0.93,0.68,0.22,0.02,0,0,0.01,0,0,0,0,0,0,0], [0,0.39,0.69,0.91,1.0,1.0,1.0,1.0,1.0,0.85,0.52,0.35,0.24,0.17,0.07,0,0,0,0,0,0,0,0,0], [0,0,0.29,0.82,1.0,1.0,1.0,1.0,1.0,1.0,0.67,0.29,0.02,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0.2,0.51,0.77,0.96,0.93,0.71,0.4,0.16,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.08,0.07,0.03,0,0,0,0,0,0,0,0,0,0,0,0,0]]]
# }
    
# pattern["emitter"] = {"name":"Smooth glider gun", "version" : "LeniaModel", "R":13,"T":2,"kernels":[
#   {"b":[1],"m":0.184,"s":0.0632,"h":0.076,"r":0.56,"c0":0,"c1":0},
#   {"b":[1],"m":0.1,"s":0.1511,"h":0.516,"r":0.76,"c0":0,"c1":0},
#   {"b":[1],"m":0.246,"s":0.047,"h":0.554,"r":0.5,"c0":0,"c1":0},
#   {"b":[1/12,1],"m":0.1,"s":0.0553,"h":0.294,"r":0.84,"c0":1,"c1":1},
#   {"b":[1],"m":0.324,"s":0.0782,"h":0.594,"r":0.97,"c0":1,"c1":1},
#   {"b":[5/6,1],"m":0.229,"s":0.0321,"h":0.612,"r":0.98,"c0":1,"c1":1},
#   {"b":[1],"m":0.29,"s":0.0713,"h":0.396,"r":0.87,"c0":2,"c1":2},
#   {"b":[1],"m":0.484,"s":0.1343,"h":0.244,"r":0.96,"c0":2,"c1":2},
#   {"b":[1],"m":0.592,"s":0.1807,"h":0.562,"r":0.93,"c0":2,"c1":2},
#   {"b":[1],"m":0.398,"s":0.1411,"h":0.36,"r":0.89,"c0":0,"c1":1},
#   {"b":[1],"m":0.388,"s":0.1144,"h":0.192,"r":0.67,"c0":0,"c1":2},
#   {"b":[1,11/12,0],"m":0.312,"s":0.0697,"h":0.462,"r":0.58,"c0":1,"c1":0},
#   {"b":[1],"m":0.327,"s":0.1036,"h":0.608,"r":1.0,"c0":1,"c1":2},
#   {"b":[1],"m":0.471,"s":0.1176,"h":0.394,"r":0.8,"c0":2,"c1":0},
#   {"b":[1,1/12],"m":0.1,"s":0.0573,"h":0.14,"r":0.62,"c0":2,"c1":1}],
#   "cells":[
#   [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0.15,0.48,0.19,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.61,1.00,1.00,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.12,0.60,1.00,1.00,1.00,1.00,0,0,0,0,0,0.19,0.61,0.11,0,0,0,0,0,0], [0,0,0,0,0,0.36,0,0,0,0,0,1.00,1.00,1.00,0.72,0.40,0,0,0,0.91,1.00,0.61,0.26,0,0,0,0,0], [0,0,0,0,0.34,0.76,0.10,0,0,0,0,0,0.96,1.00,0.96,0.83,0.88,0.72,0.86,1.00,1.00,0.87,0.44,0.05,0,0,0,0], [0,0,0,0.12,0.49,0.89,0.16,0,0,0,0,0,0.52,0.96,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.50,0.03,0,0,0,0], [0,0,0,0.58,0.82,1.00,0.70,0,0,0,0,0,0,0.37,0.34,0.06,0,0.49,1.00,1.00,1.00,1.00,0.57,0.01,0,0,0,0], [0,0,0.16,0.17,0.16,0.53,0.63,0.82,0.71,0.16,0,0,0,0,0,0,0,0,0,0.52,0.45,0.07,0.37,0.05,0,0,0,0], [0,0,0,0,0,0,0.14,1.00,1.00,1.00,0.43,0,0,0.35,0.03,0,0,0,0,0,0.03,0,0,0.08,0,0,0,0], [0,0,0,0,0,0,0,1.00,1.00,1.00,1.00,1.00,1.00,0.22,0,0,0,0,0,0,0,0.07,0,0.18,0,0,0,0], [0,0,0.25,0,0,0,0,0.01,1.00,1.00,0.81,0.40,0.25,0,0,0,0,0,0,0,0,0.31,0.53,0.48,0,0,0,0], [0,0,0.63,0,0,0,0,0,0.40,1.00,0.14,0.18,0.17,0,0,0,0,0,0.07,0,0.46,1.00,1.00,0.94,0.23,0,0,0], [0,0,0.97,1.00,0,0,0,0,0,1.00,0.19,0.13,0.09,0,0,0,0,0.91,1.00,0.97,1.00,1.00,1.00,0.99,0.61,0,0,0], [0,0.22,1.00,1.00,1.00,0.58,0,0,0,0.64,0.10,0.10,0,0,0,0,0,0.92,0.73,0.73,0.88,1.00,1.00,0.27,0.36,0.11,0,0], [0,1.00,1.00,1.00,1.00,1.00,0.78,0,0.06,0.34,0,0,0,0,0,0,0,0,0,0.29,0.70,1.00,1.00,0,0,0.11,0,0], [0,0.39,0,0.78,1.00,1.00,0.88,0,0,0,0,0,0,0,0,0,0,0,0,0,0.60,1.00,0.82,0,0.01,0.02,0,0], [0,0,0,0,0.59,0.85,0.52,0,0,0,0,0,0,0,0,0,0,0,0,0,0.55,1.00,0.62,0.05,0.21,0,0,0], [0,0,0,0,0.45,0.86,1.00,0,0,0,0,0,0.48,0.93,0,0,0,0,0,0,0.92,1.00,0.74,0.37,0.10,0,0,0], [0,0,0,0,0,0.75,1.00,0.33,0,0,0,0,1.00,1.00,0.22,0,0,0,0,0.29,1.00,1.00,0.49,0.18,0,0,0,0], [0,0,0,0,0,0.88,1.00,1.00,0.27,0,0,0,0.61,1.00,0.54,0.27,0,0,0.38,1.00,1.00,0.60,0.24,0.02,0,0,0,0], [0,0,0.43,0,0.95,1.00,1.00,1.00,0.12,0,0,0,0.66,1.00,0.84,0.75,0.78,0.90,1.00,1.00,0.65,0.27,0.14,0,0,0,0,0], [0,0,0,0.97,1.00,1.00,1.00,1.00,0,0,0.07,0.43,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.58,0.27,0.17,0,0,0,0,0,0], [0,0,0,0.09,0.48,0.87,1.00,1.00,0,0,0,0,1.00,1.00,1.00,0.81,0.33,0.29,0.49,0.30,0.12,0,0,0,0,0,0,0], [0,0,0,0,0.14,0.22,0.21,0.19,0.12,0,0,0.45,0.98,1.00,0.42,0,0,0.09,0.28,0.05,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0.19,0.60,0.50,0.14,0.16,0.19,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.05,0.06,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
#   [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.08,0.21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0.81,0.98,0.85,0.67,0.45,0.69,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.35,0,0,0,0,0.64,1.00,1.00,1.00,1.00,1.00,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.06,0.36,0,0,0,0,0.28,0.50,0.46,0.91,1.00,1.00,0.82,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.12,0.13,0.06,0.05,0.05,0.03,0,0.36,0.56,0.60,1.00,1.00,1.00,0.62,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0.18,0.35,0.35,1.00,0.07,0,0.47,0.77,1.00,1.00,1.00,1.00,0.14,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0.16,0.38,0,0,0.37,0.29,0.34,0.90,1.00,1.00,1.00,1.00,0.34,0,0,0,0,0,0], [0,0,0,0,0,0.05,0,0,0,0.11,1.00,0,0,0,0,0.50,1.00,1.00,1.00,1.00,1.00,0.43,0,0,0,0,0,0], [0,0,0,0,0,0,0.86,0,0,0.01,0.19,0.82,0,0,0,0.52,1.00,1.00,1.00,1.00,0.97,0.48,0,0,0,0,0,0], [0,0,0,0,0,0,0.73,0.73,0.30,0.32,0,0.21,0.10,0,0.07,0.98,1.00,1.00,1.00,1.00,0.85,0.50,0,0,0,0,0,0], [0,0,0,0,0,0,0.30,1.00,0.26,0.44,0.57,0.36,0.49,0.69,1.00,1.00,1.00,1.00,1.00,1.00,0.86,0.45,0,0,0,0,0,0], [0,0,0,0,0,0,0.12,0.95,0.71,0.26,0.55,0.78,0.93,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.27,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.83,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.93,0.06,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.38,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.53,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.04,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,1.00,0.68,0.05,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.56,0.85,0.95,0.97,0.92,0.82,0.82,0.69,0.32,0.02,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0.03,0.12,0.11,0.04,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
#   [[0,0,0,0,0,0,0.01,0.02,0.03,0.04,0.06,0.08,0.09,0.10,0.10,0.10,0.10,0.08,0.05,0.03,0.02,0.01,0,0,0,0,0,0], [0,0,0,0,0.01,0.01,0.03,0.05,0.08,0.11,0.13,0.15,0.17,0.18,0.20,0.22,0.21,0.19,0.15,0.10,0.06,0.04,0.02,0.01,0,0,0,0], [0,0,0,0.01,0.02,0.04,0.08,0.12,0.17,0.20,0.22,0.24,0.26,0.28,0.30,0.33,0.33,0.31,0.26,0.20,0.14,0.09,0.06,0.03,0.01,0,0,0], [0,0,0.01,0.03,0.05,0.09,0.15,0.22,0.28,0.31,0.32,0.32,0.33,0.34,0.37,0.40,0.42,0.41,0.36,0.30,0.23,0.17,0.11,0.07,0.03,0.01,0,0], [0,0.01,0.03,0.06,0.10,0.16,0.24,0.31,0.37,0.40,0.39,0.37,0.36,0.37,0.39,0.42,0.44,0.44,0.42,0.38,0.33,0.26,0.19,0.13,0.07,0.03,0.01,0], [0.01,0.02,0.05,0.10,0.16,0.23,0.30,0.38,0.42,0.43,0.43,0.41,0.39,0.39,0.40,0.42,0.43,0.43,0.42,0.41,0.40,0.35,0.28,0.20,0.12,0.06,0.02,0], [0.01,0.04,0.09,0.15,0.23,0.29,0.34,0.39,0.42,0.43,0.44,0.45,0.45,0.45,0.45,0.45,0.44,0.43,0.42,0.43,0.43,0.42,0.37,0.29,0.19,0.10,0.04,0.01], [0.03,0.07,0.13,0.21,0.28,0.32,0.35,0.39,0.42,0.45,0.48,0.51,0.53,0.54,0.53,0.52,0.50,0.48,0.46,0.45,0.46,0.47,0.45,0.37,0.26,0.15,0.07,0.03], [0.04,0.10,0.19,0.27,0.33,0.35,0.36,0.39,0.44,0.50,0.57,0.62,0.64,0.65,0.63,0.61,0.59,0.56,0.54,0.52,0.51,0.52,0.52,0.45,0.34,0.21,0.11,0.05], [0.06,0.14,0.25,0.34,0.39,0.39,0.39,0.42,0.48,0.56,0.65,0.71,0.74,0.74,0.72,0.69,0.66,0.63,0.60,0.58,0.56,0.56,0.56,0.51,0.41,0.27,0.15,0.07], [0.09,0.19,0.30,0.39,0.42,0.43,0.44,0.48,0.55,0.64,0.69,0.73,0.75,0.77,0.77,0.76,0.73,0.69,0.66,0.63,0.60,0.58,0.58,0.55,0.46,0.32,0.19,0.09], [0.11,0.21,0.33,0.41,0.43,0.44,0.48,0.55,0.63,0.69,0.69,0.66,0.66,0.69,0.73,0.76,0.76,0.73,0.71,0.67,0.63,0.59,0.58,0.56,0.49,0.36,0.22,0.11], [0.13,0.22,0.33,0.40,0.43,0.45,0.50,0.60,0.69,0.72,0.66,0.59,0.56,0.58,0.64,0.70,0.73,0.73,0.71,0.68,0.64,0.59,0.57,0.56,0.51,0.40,0.25,0.13], [0.14,0.23,0.32,0.37,0.41,0.45,0.52,0.63,0.73,0.74,0.67,0.57,0.52,0.52,0.57,0.65,0.71,0.72,0.71,0.68,0.63,0.59,0.56,0.56,0.53,0.43,0.27,0.14], [0.14,0.24,0.31,0.35,0.38,0.43,0.51,0.62,0.73,0.77,0.71,0.60,0.54,0.53,0.57,0.65,0.71,0.73,0.72,0.68,0.64,0.59,0.57,0.57,0.55,0.44,0.28,0.15], [0.15,0.24,0.32,0.35,0.37,0.41,0.50,0.60,0.70,0.77,0.76,0.67,0.60,0.58,0.62,0.69,0.75,0.76,0.74,0.70,0.65,0.60,0.58,0.58,0.55,0.45,0.28,0.14], [0.15,0.25,0.33,0.37,0.38,0.41,0.48,0.57,0.66,0.74,0.77,0.73,0.68,0.66,0.70,0.75,0.77,0.77,0.76,0.72,0.66,0.61,0.59,0.59,0.55,0.43,0.26,0.13], [0.15,0.26,0.35,0.40,0.41,0.41,0.46,0.54,0.62,0.69,0.74,0.74,0.72,0.72,0.75,0.77,0.77,0.76,0.75,0.72,0.66,0.61,0.59,0.59,0.53,0.39,0.23,0.11], [0.13,0.25,0.36,0.42,0.43,0.42,0.45,0.51,0.58,0.65,0.70,0.72,0.72,0.72,0.75,0.77,0.76,0.74,0.73,0.70,0.64,0.60,0.59,0.56,0.48,0.34,0.19,0.09], [0.11,0.22,0.33,0.41,0.43,0.42,0.43,0.48,0.55,0.61,0.67,0.69,0.69,0.70,0.72,0.74,0.74,0.73,0.70,0.66,0.61,0.58,0.57,0.52,0.42,0.28,0.15,0.06], [0.07,0.17,0.28,0.36,0.40,0.41,0.42,0.46,0.52,0.58,0.63,0.66,0.66,0.66,0.67,0.69,0.70,0.69,0.65,0.61,0.58,0.56,0.54,0.47,0.35,0.21,0.11,0.04], [0.04,0.11,0.20,0.29,0.36,0.39,0.42,0.45,0.51,0.55,0.60,0.62,0.62,0.61,0.62,0.63,0.64,0.63,0.61,0.58,0.56,0.54,0.48,0.39,0.27,0.15,0.07,0.02], [0.02,0.07,0.13,0.21,0.30,0.36,0.41,0.46,0.51,0.55,0.57,0.59,0.58,0.57,0.57,0.58,0.59,0.59,0.59,0.57,0.54,0.49,0.41,0.30,0.19,0.10,0.04,0.01], [0.01,0.03,0.08,0.15,0.23,0.31,0.38,0.44,0.51,0.55,0.57,0.58,0.56,0.55,0.55,0.56,0.57,0.58,0.57,0.54,0.48,0.41,0.31,0.21,0.12,0.05,0.02,0], [0,0.02,0.05,0.09,0.15,0.23,0.30,0.38,0.46,0.52,0.55,0.56,0.56,0.55,0.56,0.56,0.57,0.56,0.52,0.46,0.38,0.29,0.20,0.12,0.06,0.02,0,0], [0,0.01,0.02,0.05,0.09,0.15,0.21,0.28,0.36,0.42,0.46,0.49,0.50,0.51,0.52,0.52,0.50,0.47,0.41,0.34,0.26,0.18,0.11,0.06,0.02,0.01,0,0], [0,0,0.01,0.02,0.04,0.08,0.12,0.17,0.23,0.28,0.32,0.35,0.38,0.39,0.40,0.39,0.37,0.32,0.26,0.20,0.14,0.09,0.05,0.02,0.01,0,0,0], [0,0,0,0,0.01,0.03,0.06,0.09,0.12,0.15,0.18,0.21,0.23,0.24,0.25,0.23,0.21,0.18,0.14,0.10,0.06,0.04,0.02,0,0,0,0,0], [0,0,0,0,0,0.01,0.02,0.03,0.05,0.07,0.09,0.11,0.12,0.12,0.12,0.11,0.10,0.08,0.06,0.04,0.02,0.01,0,0,0,0,0,0]]]
# }

# pattern["pacman"] = {"name":"Pacman", "version" : "LeniaModel", "R":13,"T":2,"kernels":[
#   {"b":[1,0],"m":0.362,"s":0.0404,"h":0.17,"r":0.57,"c0":0,"c1":0},
#   {"b":[1],"m":0.257,"s":0.1469,"h":0.41,"r":0.5,"c0":0,"c1":0},
#   {"b":[1,1/4],"m":0.247,"s":0.0245,"h":0.72,"r":0.8,"c0":0,"c1":0},
#   {"b":[1],"m":0.199,"s":0.0575,"h":0.24,"r":0.91,"c0":1,"c1":1},
#   {"b":[1],"m":0.288,"s":0.0699,"h":0.34,"r":0.67,"c0":1,"c1":1},
#   {"b":[1],"m":0.26,"s":0.0346,"h":0.74,"r":1.0,"c0":1,"c1":1},
#   {"b":[1],"m":0.108,"s":0.0786,"h":0.5,"r":0.89,"c0":2,"c1":2},
#   {"b":[1,0],"m":0.597,"s":0.1136,"h":0.18,"r":0.55,"c0":2,"c1":2},
#   {"b":[1,0],"m":0.476,"s":0.1894,"h":0.35,"r":0.59,"c0":2,"c1":2},
#   {"b":[1],"m":0.481,"s":0.143,"h":0.53,"r":0.98,"c0":0,"c1":1},
#   {"b":[1],"m":0.343,"s":0.0914,"h":0.17,"r":0.62,"c0":0,"c1":2},
#   {"b":[1,1],"m":0.197,"s":0.0732,"h":0.55,"r":0.57,"c0":1,"c1":0},
#   {"b":[1],"m":0.247,"s":0.1089,"h":0.2,"r":0.6,"c0":1,"c1":2},
#   {"b":[1/4,1,0],"m":0.393,"s":0.1117,"h":0.42,"r":0.78,"c0":2,"c1":0},
#   {"b":[1,1/12],"m":0.179,"s":0.0906,"h":0.23,"r":0.84,"c0":2,"c1":1}],
#   "cells":[
#   [[0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.02,0.05,0.29,0.10,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0,0], [0,0,0,0,0,0,0,0,0,0.01,0.03,0.03,0.02,0.44,0.53,0.65,0.88,0.48,0.62,0.82,0.72,0.06,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0,0], [0,0,0,0,0,0,0,0,0.01,0.02,0.08,0.47,0.91,0.90,0.05,0.06,0.46,0.99,0.95,0.07,0.06,0.35,0.73,0.02,0.02,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.01,0.01,0.07,0.96,0.99,0.99,0.17,0.13,0.16,0.56,0.69,0.55,0.12,0.10,0.11,0.99,0.58,0.07,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0.01,0.01,0.02,0.95,0.17,0.64,0.75,0.44,0.37,0.48,0.63,0.73,0.64,0.15,0.13,0.45,0.91,0.99,0.96,0.56,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0.01,0.01,0.02,0.10,0.42,0.15,0.20,0.43,0.49,0.72,0.80,0.82,0.87,0.82,0.68,0.64,0.72,0.74,0.31,0.07,0.19,0.21,0.01,0.01,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0], [0,0,0,0,0.01,0.02,0.02,0.08,0.95,0.17,0.17,0.44,0.75,0.65,0.68,0.72,0.38,0.48,0.85,0.87,0.86,0.84,0.65,0.15,0.12,0.10,0.84,0.01,0.01,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0,0,0,0], [0,0,0,0.01,0.01,0.08,0.34,0.94,0.20,0.24,0.44,0.82,0.84,0.26,0.33,0.09,0.09,0.15,0.36,0.62,0.42,0.64,0.78,0.26,0.27,0.60,0.97,0.03,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.05,0.84,0.95,0.26,0.44,0.40,0.84,0.94,0.64,0.17,0.03,0.02,0.02,0.02,0.04,0.07,0.15,0.66,0.89,0.24,0.51,0.73,0.95,0.96,0.04,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.27,0.96,0.85,0.47,0.76,0.64,0.89,0.96,0.25,0.05,0.02,0.02,0.05,0.07,0.02,0.02,0.02,0.09,0.65,0.43,0.66,0.62,0.57,0.06,0.65,0.01,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0], [0,0,0.01,0.02,0.41,0.96,0.92,0.76,0.83,0.72,0.55,0.22,0.06,0.03,0.02,0.06,0.04,0.03,0.04,0.02,0.02,0.03,0.29,0.44,0.81,0.76,0.69,0.04,0.67,0.01,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0,0,0,0], [0,0,0.01,0.02,0.23,0.97,0.88,0.68,0.78,0.16,0.06,0.03,0.02,0.03,0.91,0.49,0.01,0.01,0.03,0.04,0.02,0.03,0.22,0.39,0.84,0.78,0.70,0.18,0.13,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0.01,0.01,0.11,0.95,0.18,0.27,0.53,0.07,0.04,0.02,0.03,0.11,0.91,0.22,0.01,0.01,0.04,0.95,0.70,0.04,0.20,0.63,0.76,0.71,0.33,0.96,0.02,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.04,0.91,0.13,0.12,0.35,0.48,0.11,0.04,0.04,0.12,0.95,0.04,0.02,0.03,0.93,0.87,0.95,0.06,0.10,0.44,0.63,0.19,0.21,0.93,0.02,0.01,0.01,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0], [0,0,0,0.01,0.02,0.95,0.16,0.13,0.13,0.99,0.98,0.07,0.04,0.04,0.82,0.06,0.04,0.05,0.86,0.93,0.22,0.09,0.09,0.65,0.72,0.24,0.15,0.87,0.03,0.02,0.01,0,0,0,0,0,0,0,0.01,0.01,0.01,0,0,0,0], [0,0,0.01,0.01,0.02,0.91,0.84,0.18,0.14,0.99,0.98,0.08,0.04,0.04,0.40,0.07,0.04,0.05,0.06,0.05,0.02,0.09,0.11,0.77,0.79,0.42,0.14,0.95,0.03,0.02,0.01,0,0,0,0,0,0,0,0,0.01,0.01,0,0,0,0], [0,0,0.01,0.01,0.02,0.24,0.95,0.18,0.18,0.98,0.96,0.11,0.04,0.04,0.06,0.05,0.04,0.04,0.03,0.02,0.02,0.09,0.55,0.87,0.87,0.85,0.56,0.90,0.02,0.02,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0.01,0.02,0.05,0.96,0.83,0.13,0.17,0.21,0.20,0.21,0.12,0.04,0.04,0.04,0.05,0.07,0.05,0.04,0.05,0.21,0.78,0.89,0.89,0.81,0.93,0.04,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0.01,0.03,0.91,0.95,0.09,0.08,0.19,0.20,0.12,0.14,0.33,0.38,0.05,0.04,0.20,0.97,0.98,0.15,0.10,0.14,0.77,0.87,0.86,0.10,0.40,0.02,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0.01,0.01,0.04,0.96,0.81,0.17,0.09,0.65,0.31,0.31,0.85,0.99,0.87,0.09,0.06,0.20,0.93,0.99,0.13,0.09,0.16,0.83,0.88,0.21,0.03,0.14,0.01,0.01,0,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0,0], [0,0.01,0.01,0.04,0.93,0.94,0.94,0.96,0.98,0.12,0.15,0.87,0.99,0.73,0.05,0.05,0.09,0.99,0.96,0.11,0.10,0.26,0.97,0.99,0.15,0.05,0.05,0.01,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0,0,0,0,0,0], [0,0,0.01,0.02,0.89,0.96,0.94,0.45,0.96,0.05,0.04,0.15,0.95,0.76,0.04,0.05,0.07,0.80,0.19,0.07,0.08,0.33,1.00,0.92,0.94,0.32,0.02,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0.01,0.02,0.04,0.56,0.93,0.29,0.45,0.05,0.03,0.04,0.96,0.92,0.06,0.04,0.07,0.90,0.10,0.06,0.05,0.20,0.91,0.07,0.07,0.02,0.02,0.01,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0,0,0,0], [0,0,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.09,0.29,0.75,0.98,0.98,0.14,0.05,0.89,0.98,0.95,0.46,0.49,0.81,0.05,0.04,0.04,0.02,0.01,0,0,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0,0,0], [0,0,0.01,0,0,0.01,0.01,0.01,0.02,0.01,0.01,0.08,0.21,0.78,0.95,0.96,0.90,0.07,0.65,0.58,0.23,0.02,0.01,0.02,0.02,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.03,0.09,0.08,0.08,0.43,0.33,0.16,0.02,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.02,0.01,0.02,0.02,0.03,0.02,0.02,0.02,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.01,0.01,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0.01,0.01,0.01,0,0,0,0,0.01,0.01,0,0,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
#   [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.03,0.03,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.02,0.03,0.04,0.05,0.07,0.13,0.11,0.05,0.04,0.03,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.02,0.03,0.05,0.25,0.81,0.91,0.92,0.91,0.82,0.48,0.18,0.04,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0.01,0.01,0.01,0.01,0.02,0.03,0.05,0.65,0.95,0.98,0.98,0.98,0.98,0.98,0.94,0.87,0.32,0.04,0.02,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.02,0.05,0.19,0.96,0.98,0.97,0.64,0.33,0.58,0.98,0.98,0.98,0.86,0.11,0.03,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0.01,0.01,0.01,0.01,0.02,0.04,0.10,0.91,0.98,0.96,0.11,0.04,0.04,0.05,0.14,0.96,0.99,0.96,0.63,0.04,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.01,0.01,0.01,0.01,0.02,0.06,0.21,0.96,0.97,0.76,0.03,0.02,0.03,0.03,0.04,0.27,0.95,0.98,0.84,0.05,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.01,0.01,0.01,0.01,0.04,0.09,0.36,0.96,0.96,0.58,0.03,0.03,0.04,0.03,0.03,0.11,0.66,0.98,0.89,0.05,0.02,0.02,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.01,0.01,0.01,0.02,0.05,0.12,0.40,0.96,0.97,0.82,0.09,0.04,0.04,0.03,0.03,0.12,0.93,0.98,0.88,0.05,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.01,0.01,0.01,0.02,0.05,0.13,0.29,0.91,0.98,0.96,0.80,0.36,0.06,0.03,0.05,0.88,0.96,0.98,0.78,0.05,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0.01,0.01,0.01,0.01,0.02,0.05,0.12,0.24,0.80,0.97,0.98,0.93,0.75,0.29,0.09,0.43,0.95,0.98,0.96,0.51,0.04,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0.01,0.01,0.01,0.02,0.05,0.11,0.21,0.56,0.95,0.98,0.98,0.96,0.91,0.91,0.96,0.98,0.98,0.91,0.08,0.03,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0.01,0.01,0.01,0.02,0.04,0.09,0.19,0.44,0.89,0.96,0.98,0.98,0.97,0.98,0.98,0.96,0.93,0.17,0.05,0.02,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0.01,0.01,0.02,0.02,0.07,0.16,0.39,0.80,0.90,0.91,0.90,0.90,0.93,0.91,0.56,0.24,0.07,0.03,0.02,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0.01,0.01,0.01,0.02,0.04,0.09,0.18,0.33,0.59,0.45,0.24,0.21,0.24,0.22,0.12,0.08,0.04,0.02,0.01,0.01,0,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0.01,0.01,0.02,0.04,0.06,0.12,0.22,0.18,0.13,0.11,0.10,0.09,0.05,0.04,0.02,0.01,0.01,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0.01,0.01,0.02,0.03,0.04,0.08,0.09,0.07,0.06,0.05,0.03,0.02,0.02,0.01,0.01,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0.01,0.01,0.02,0.02,0.03,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0,0,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0.01,0.01,0.01,0.01,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0.01,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
#   [[0.06,0.06,0.05,0.06,0.06,0.07,0.08,0.09,0.09,0.07,0.06,0.04,0.04,0.04,0.03,0.03,0.02,0.02,0.02,0.02,0.03,0.03,0.04,0.05,0.06,0.08,0.09,0.09,0.08,0.09,0.09,0.09,0.07,0.06,0.04,0.04,0.05,0.07,0.10,0.12,0.11,0.08,0.05,0.03,0.03], [0.06,0.05,0.06,0.06,0.07,0.08,0.09,0.08,0.07,0.05,0.04,0.03,0.03,0.03,0.03,0.03,0.03,0.02,0.02,0.02,0.02,0.02,0.02,0.03,0.04,0.05,0.07,0.09,0.09,0.09,0.09,0.08,0.06,0.05,0.04,0.05,0.10,0.27,0.85,0.88,0.87,0.81,0.17,0.07,0.04], [0.06,0.05,0.06,0.07,0.08,0.09,0.09,0.07,0.05,0.04,0.03,0.02,0.02,0.03,0.04,0.04,0.04,0.03,0.03,0.02,0.02,0.02,0.02,0.02,0.03,0.04,0.06,0.08,0.09,0.09,0.08,0.07,0.06,0.05,0.05,0.07,0.16,0.85,0.92,0.93,0.93,0.90,0.77,0.11,0.05], [0.06,0.06,0.06,0.07,0.09,0.08,0.07,0.05,0.03,0.02,0.02,0.02,0.04,0.06,0.08,0.13,0.14,0.09,0.06,0.05,0.05,0.04,0.02,0.02,0.02,0.03,0.04,0.06,0.07,0.07,0.07,0.06,0.05,0.05,0.05,0.11,0.59,0.93,0.93,0.86,0.90,0.95,0.92,0.74,0.09], [0.06,0.06,0.07,0.09,0.08,0.06,0.05,0.03,0.02,0.02,0.02,0.04,0.11,0.44,0.73,0.80,0.80,0.75,0.67,0.45,0.27,0.09,0.05,0.04,0.02,0.03,0.03,0.04,0.05,0.06,0.06,0.05,0.05,0.05,0.05,0.13,0.85,0.94,0.84,0.12,0.10,0.73,0.94,0.87,0.13], [0.06,0.07,0.08,0.09,0.06,0.04,0.03,0.02,0.02,0.03,0.05,0.17,0.64,0.85,0.82,0.69,0.91,0.87,0.52,0.87,0.82,0.69,0.45,0.09,0.05,0.04,0.03,0.04,0.04,0.05,0.05,0.05,0.05,0.05,0.05,0.11,0.70,0.94,0.94,0.80,0.18,0.57,0.94,0.87,0.15], [0.07,0.08,0.09,0.07,0.04,0.03,0.02,0.02,0.03,0.05,0.15,0.75,0.89,0.76,0.28,0.61,0.78,0.16,0.10,0.88,0.91,0.86,0.80,0.70,0.25,0.07,0.04,0.03,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.07,0.18,0.87,0.93,0.95,0.95,0.95,0.92,0.77,0.11], [0.07,0.09,0.08,0.05,0.03,0.02,0.02,0.02,0.04,0.13,0.81,0.90,0.56,0.11,0.65,0.82,0.82,0.73,0.73,0.84,0.78,0.10,0.29,0.89,0.76,0.27,0.05,0.03,0.03,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.06,0.11,0.49,0.82,0.85,0.84,0.70,0.13,0.07], [0.08,0.09,0.07,0.04,0.02,0.02,0.02,0.03,0.10,0.62,0.90,0.89,0.13,0.48,0.87,0.89,0.87,0.89,0.90,0.87,0.78,0.30,0.69,0.88,0.85,0.63,0.07,0.03,0.03,0.03,0.04,0.04,0.04,0.04,0.03,0.02,0.02,0.03,0.04,0.05,0.07,0.07,0.06,0.05,0.04], [0.09,0.08,0.05,0.03,0.02,0.02,0.02,0.06,0.25,0.88,0.91,0.79,0.80,0.90,0.89,0.72,0.54,0.60,0.85,0.89,0.87,0.81,0.80,0.49,0.75,0.74,0.09,0.04,0.02,0.03,0.03,0.03,0.03,0.03,0.02,0.02,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.03,0.04], [0.09,0.07,0.04,0.03,0.02,0.02,0.04,0.13,0.86,0.92,0.43,0.12,0.89,0.89,0.56,0.17,0.10,0.11,0.25,0.72,0.87,0.87,0.80,0.26,0.71,0.76,0.11,0.04,0.02,0.02,0.03,0.03,0.03,0.03,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.03], [0.09,0.07,0.04,0.02,0.02,0.04,0.07,0.81,0.94,0.88,0.07,0.11,0.89,0.78,0.11,0.04,0.02,0.03,0.06,0.26,0.58,0.89,0.83,0.11,0.44,0.83,0.18,0.04,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.03], [0.09,0.06,0.04,0.03,0.03,0.08,0.18,0.93,0.94,0.86,0.71,0.85,0.82,0.21,0.04,0.02,0.01,0.01,0.03,0.12,0.31,0.90,0.88,0.44,0.84,0.85,0.31,0.04,0.02,0.02,0.02,0.02,0.02,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.03], [0.09,0.06,0.04,0.03,0.05,0.16,0.52,0.96,0.89,0.82,0.78,0.88,0.77,0.08,0.02,0.01,0.01,0.01,0.02,0.09,0.23,0.89,0.88,0.64,0.90,0.84,0.17,0.04,0.02,0.02,0.02,0.02,0.03,0.03,0.04,0.04,0.04,0.03,0.02,0.02,0.01,0.01,0.02,0.02,0.04], [0.09,0.06,0.04,0.03,0.05,0.20,0.62,0.97,0.91,0.76,0.29,0.55,0.69,0.05,0.02,0.01,0.01,0.01,0.03,0.12,0.31,0.89,0.75,0.08,0.89,0.84,0.14,0.04,0.02,0.01,0.01,0.02,0.03,0.04,0.09,0.17,0.25,0.20,0.12,0.06,0.04,0.02,0.02,0.02,0.04], [0.08,0.05,0.03,0.03,0.04,0.13,0.30,0.96,0.96,0.92,0.91,0.89,0.34,0.04,0.02,0.01,0.01,0.02,0.05,0.33,0.80,0.89,0.75,0.09,0.90,0.80,0.10,0.03,0.02,0.01,0.01,0.02,0.04,0.07,0.27,0.90,0.93,0.93,0.91,0.83,0.15,0.06,0.03,0.03,0.04], [0.08,0.05,0.03,0.02,0.04,0.09,0.18,0.93,0.97,0.96,0.94,0.82,0.14,0.04,0.02,0.02,0.02,0.03,0.09,0.72,0.84,0.89,0.82,0.25,0.91,0.76,0.09,0.03,0.02,0.01,0.01,0.02,0.05,0.09,0.61,0.93,0.95,0.95,0.94,0.91,0.79,0.11,0.05,0.03,0.04], [0.07,0.04,0.02,0.02,0.02,0.04,0.06,0.22,0.83,0.93,0.85,0.38,0.07,0.04,0.02,0.02,0.04,0.08,0.62,0.85,0.88,0.38,0.67,0.89,0.91,0.68,0.06,0.02,0.02,0.01,0.01,0.02,0.05,0.11,0.88,0.95,0.82,0.58,0.89,0.95,0.93,0.78,0.09,0.04,0.04], [0.06,0.03,0.02,0.02,0.02,0.02,0.03,0.06,0.13,0.18,0.14,0.08,0.05,0.04,0.03,0.04,0.09,0.58,0.85,0.89,0.82,0.07,0.10,0.91,0.89,0.29,0.05,0.02,0.01,0.01,0.01,0.02,0.05,0.09,0.85,0.95,0.87,0.13,0.11,0.67,0.94,0.88,0.15,0.05,0.04], [0.05,0.03,0.02,0.01,0.01,0.02,0.02,0.03,0.04,0.05,0.06,0.05,0.04,0.04,0.04,0.08,0.25,0.87,0.88,0.79,0.71,0.35,0.78,0.92,0.81,0.09,0.03,0.02,0.01,0.01,0.01,0.02,0.03,0.05,0.23,0.91,0.95,0.93,0.27,0.39,0.93,0.89,0.17,0.06,0.04], [0.04,0.02,0.02,0.01,0.01,0.01,0.01,0.02,0.03,0.03,0.04,0.04,0.04,0.04,0.05,0.15,0.89,0.92,0.53,0.43,0.71,0.89,0.93,0.89,0.33,0.05,0.02,0.02,0.01,0.01,0.01,0.01,0.02,0.02,0.06,0.22,0.87,0.93,0.95,0.94,0.93,0.83,0.13,0.06,0.04], [0.04,0.03,0.02,0.02,0.02,0.02,0.02,0.02,0.03,0.03,0.04,0.04,0.04,0.05,0.08,0.34,0.95,0.94,0.81,0.81,0.86,0.94,0.93,0.75,0.06,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.04,0.10,0.64,0.83,0.85,0.78,0.17,0.08,0.05,0.05], [0.04,0.05,0.07,0.09,0.09,0.06,0.05,0.05,0.04,0.03,0.03,0.03,0.04,0.05,0.10,0.40,0.96,0.98,0.96,0.96,0.96,0.95,0.80,0.08,0.03,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.04,0.07,0.10,0.10,0.07,0.05,0.05,0.05], [0.06,0.13,0.78,0.87,0.88,0.85,0.83,0.71,0.14,0.06,0.03,0.02,0.02,0.03,0.06,0.16,0.60,0.95,0.96,0.94,0.91,0.32,0.08,0.03,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.03,0.04,0.04,0.05,0.05,0.06], [0.09,0.47,0.93,0.95,0.94,0.95,0.95,0.95,0.87,0.14,0.04,0.02,0.02,0.02,0.03,0.04,0.09,0.14,0.15,0.12,0.09,0.05,0.02,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.04,0.04,0.05,0.07,0.08], [0.10,0.82,0.95,0.86,0.11,0.11,0.18,0.95,0.93,0.40,0.05,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.02,0.04,0.06,0.06,0.04,0.02,0.02,0.01,0.01,0.01,0.01,0.02,0.02,0.04,0.06,0.07,0.08,0.09], [0.09,0.55,0.94,0.92,0.48,0.20,0.69,0.95,0.92,0.15,0.04,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.05,0.13,0.75,0.80,0.23,0.07,0.05,0.02,0.01,0.01,0.02,0.02,0.03,0.05,0.07,0.09,0.09,0.09], [0.06,0.20,0.91,0.95,0.95,0.95,0.95,0.94,0.79,0.07,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.03,0.13,0.88,0.94,0.95,0.93,0.82,0.19,0.05,0.02,0.02,0.02,0.03,0.05,0.07,0.09,0.09,0.08,0.08], [0.04,0.08,0.25,0.89,0.93,0.93,0.91,0.64,0.09,0.03,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.06,0.80,0.95,0.92,0.87,0.95,0.93,0.89,0.13,0.04,0.02,0.03,0.04,0.06,0.09,0.09,0.08,0.07,0.07], [0.04,0.05,0.12,0.33,0.79,0.81,0.58,0.15,0.05,0.02,0.01,0.01,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01,0.01,0.01,0.02,0.07,0.85,0.95,0.62,0.16,0.92,0.95,0.92,0.20,0.05,0.03,0.03,0.04,0.07,0.09,0.08,0.07,0.07,0.07], [0.04,0.04,0.05,0.07,0.09,0.08,0.07,0.04,0.02,0.01,0.01,0.01,0.01,0.02,0.04,0.07,0.27,0.23,0.07,0.03,0.02,0.01,0.01,0.01,0.01,0.02,0.08,0.87,0.95,0.20,0.09,0.64,0.95,0.94,0.50,0.07,0.03,0.04,0.05,0.08,0.09,0.08,0.07,0.06,0.06], [0.04,0.04,0.04,0.04,0.04,0.03,0.03,0.02,0.01,0.01,0.01,0.01,0.02,0.04,0.24,0.85,0.91,0.90,0.79,0.10,0.05,0.02,0.01,0.01,0.01,0.02,0.06,0.81,0.95,0.90,0.16,0.82,0.95,0.93,0.34,0.07,0.04,0.04,0.06,0.08,0.09,0.07,0.07,0.06,0.06], [0.06,0.05,0.04,0.04,0.04,0.03,0.02,0.02,0.02,0.01,0.01,0.01,0.03,0.13,0.89,0.95,0.93,0.94,0.94,0.76,0.13,0.03,0.01,0.01,0.01,0.02,0.04,0.18,0.91,0.95,0.94,0.94,0.93,0.89,0.15,0.05,0.04,0.04,0.06,0.09,0.09,0.07,0.07,0.06,0.06], [0.08,0.07,0.06,0.05,0.05,0.04,0.04,0.02,0.02,0.02,0.02,0.02,0.06,0.80,0.94,0.91,0.11,0.24,0.95,0.88,0.27,0.04,0.02,0.01,0.01,0.01,0.02,0.07,0.36,0.89,0.91,0.90,0.75,0.22,0.08,0.04,0.04,0.05,0.07,0.09,0.09,0.07,0.06,0.06,0.06], [0.09,0.09,0.08,0.08,0.07,0.06,0.05,0.04,0.03,0.02,0.02,0.03,0.09,0.88,0.95,0.72,0.09,0.75,0.95,0.89,0.29,0.04,0.02,0.01,0.01,0.01,0.02,0.04,0.08,0.15,0.19,0.16,0.10,0.07,0.04,0.04,0.04,0.06,0.08,0.09,0.08,0.07,0.06,0.06,0.06], [0.08,0.08,0.09,0.09,0.09,0.09,0.08,0.07,0.05,0.04,0.03,0.04,0.10,0.86,0.95,0.89,0.77,0.94,0.95,0.75,0.18,0.04,0.02,0.02,0.02,0.02,0.02,0.03,0.04,0.05,0.06,0.05,0.04,0.04,0.04,0.04,0.05,0.07,0.09,0.09,0.07,0.07,0.06,0.06,0.06], [0.07,0.07,0.07,0.08,0.08,0.09,0.09,0.09,0.07,0.05,0.04,0.04,0.08,0.29,0.92,0.95,0.95,0.95,0.90,0.19,0.10,0.04,0.02,0.02,0.02,0.02,0.03,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.05,0.07,0.08,0.09,0.08,0.07,0.06,0.06,0.06,0.06], [0.06,0.06,0.06,0.07,0.07,0.07,0.08,0.09,0.08,0.07,0.05,0.04,0.05,0.11,0.28,0.85,0.88,0.65,0.19,0.08,0.05,0.03,0.03,0.03,0.04,0.04,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.06,0.07,0.08,0.09,0.08,0.07,0.07,0.06,0.06,0.06,0.06], [0.06,0.06,0.06,0.06,0.06,0.07,0.07,0.08,0.09,0.08,0.06,0.05,0.04,0.05,0.08,0.11,0.11,0.09,0.06,0.04,0.04,0.04,0.04,0.05,0.06,0.07,0.07,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.08,0.09,0.09,0.08,0.07,0.07,0.06,0.06,0.06,0.06,0.06]]]
# }










class System():
    
    # Initialization of values of world and kernel parameters
    def __init__(self) -> None:
        
        self.set_world_and_kParams()
    

    # Set world and/or kernel parameters
    def set_world_and_kParams(self) -> None:
        
        self.setData()
        self.compile()
        self.center_points = {}
        self.original_indivs = {}
        self.survival_scores = {}
        self.previous_survival_scores = {}
        self.accum_neighbour_scores = {}
        self.morphology_scores = {}
        self.next_id = 0
        return

    def compile(self):

        self.model.compile()
    
    def generateRandomParams(self):
        self.k_params.generateRandomParameters(seed = self.world.seed)

    
    def step(self):

        return self.model.step()
    
    def getCurrentWorld(self):
        return self.world.A
    
    def setInitialWorld(self, A):
        self.world.A = A
    
    def getInitialWorld(self):
        return self.world.A_initial
    
    def setInitialWorld(self, A):
        self.world.A_initial = A

    def getData(self):

        data = {}

        data["version"] = self.version
        data["seed"] = self.world.seed
        data["size"] = self.world.sX
        data["numChannels"] = self.world.numChannels
        data["theta"] = self.world.theta
        data["dd"] = self.world.dd
        data["dt"] = self.world.dt
        data["sigma"] = self.world.sigma

        for k in 'CrmshBawT':
            temp = self.k_params.kernels[k]
            if type(temp) is np.ndarray:
                temp = temp.tolist()
            data[k] = temp

        return data

    def setData(self, data = None, from_seed = True):

        if data == None:

            self.world = World.World()
            self.version = "FlowLeniaModel"
            Model = getattr(Models, self.version)
            self.model = Model(
                world = self.world
            )
            self.k_params = self.model.getKParams()
            return

        self.version = data["version"]

        self.world.new_world(data)

        Model = getattr(Models, self.version)
        self.model = Model(
            world = self.world,
        )
        self.k_params = self.model.getKParams()

        self.k_params.new_params(data)

    def getCoordinatesOfIndividuals(self):

        min_size = 10 * 2

        # Sum the values along the last axis
        summed_world = np.sum(self.world.A, axis=-1)

        # Threshold the array
        mask = np.where(summed_world > 0, True, False)

        # Label the connected regions
        self.labels, num_features = ndimage.label(mask)

        # Count the number of non-zero values in each group
        counts = np.bincount(self.labels.ravel())

        # Find the bounding box of each region
        slices = ndimage.find_objects(self.labels)

        # Calculate the length of each bounding box
        lengths = [tuple(slice_.stop - slice_.start for slice_ in slice_tuple)
                for slice_tuple in slices]

        # Filter out regions that don't meet the minimum size threshold
        lengths = [(length[0] / self.world.A.shape[0], length[1] / self.world.A.shape[1]) for i, length in enumerate(
            lengths) if np.bincount(self.labels.ravel())[i+1] >= min_size]

        # Find the center of mass of each connected region that meets the minimum size threshold
        new_center_points = np.array([ndimage.center_of_mass(summed_world, labels=self.labels, index=i)
                        for i in range(1, num_features+1) if counts[i] >= min_size])
        
        new_center_points = (new_center_points / self.world.A.shape[0]).tolist()
        
        temp_CP = {}
        
        for k, v in self.center_points.items():

            if len(new_center_points) == 0:
                break

            # Convert the list of tuples to a NumPy array
            new_center_points_np = np.array(new_center_points)
            
            # Calculate the Euclidean distance between the target point and each point in the list
            distances = np.linalg.norm(new_center_points_np[:, None] - v[:2], axis=2)
            
            # Find the index of the nearest point
            nearest_index = np.argmin(distances)
            
            if distances[nearest_index] < lengths[nearest_index][0] * 1.5:

                temp_CP[k] = [
                    new_center_points[nearest_index][0], 
                    new_center_points[nearest_index][1], 
                    lengths[nearest_index][0], 
                    lengths[nearest_index][1]]
                
                # Remove the nearest point from the list
                new_center_points.pop(nearest_index)
                lengths.pop(nearest_index)

        self.center_points = temp_CP


        # Now only new detections remain in new_center_points.
        for new_center, size in zip(new_center_points, lengths):
            bbox = [
                new_center[0], 
                new_center[1], 
                size[0], 
                size[1] ]
            self.center_points[self.next_id] = bbox
            self.original_indivs[self.next_id] = self.getIndividualsAsArrays(bbox)
            self.survival_scores[self.next_id] = 0
            self.previous_survival_scores[self.next_id] = 0
            self.accum_neighbour_scores[self.next_id] = 0
            self.next_id += 1

        return self.center_points, self.world.A.shape[0]

    def getIndividualsAsArrays(self, bbox):

        # Calculate the start and end indices for slicing
        start_row = int((bbox[0] - bbox[3] / 2) * self.world.A.shape[0])
        end_row = int((bbox[0] + bbox[3] / 2) * self.world.A.shape[0])
        start_col = int((bbox[1] - bbox[2] / 2) * self.world.A.shape[1])
        end_col = int((bbox[1] + bbox[2] / 2) * self.world.A.shape[1])

        start_row = max(start_row, 0)
        end_row = min(end_row, self.world.A.shape[0])
        start_col = max(start_col, 0)
        end_col = min(end_col, self.world.A.shape[1])

        # Slice the array and store the subarray in the result dictionary
        subarray = self.world.A[start_row:end_row, start_col:end_col, :]
        
        return subarray
    
    
    def resize_individual(self, arr, new_shape):
        """
        Interpolates a NumPy array to change its dimensions using linear interpolation.
        
        Parameters:
            arr (ndarray): The input NumPy array.
            new_shape (tuple): The desired new dimensions as a tuple (new_rows, new_cols, new_depth).
        
        Returns:
            ndarray: The interpolated array with the new dimensions.
        """

        # Create the coordinates for the original array
        curr_shape = arr.shape
        coords = [np.linspace(0, curr_dim-1, curr_dim) for curr_dim in curr_shape]
        
        # Create the interpolator
        interpolator = sp.interpolate.RegularGridInterpolator(coords, arr, method='linear', bounds_error=False, fill_value=0)
        
        # Create the coordinates for the interpolated array
        new_coords = [np.linspace(0, new_dim-1, new_dim) for new_dim in new_shape]
        interp_coords = np.meshgrid(*new_coords, indexing='ij')
        points = np.stack(interp_coords, axis=-1)

        # Perform interpolation
        interpolated = interpolator(points)
        
        return interpolated
    

    def normalize_individual(self, array):

        min_val = np.min(array)
        max_val = np.max(array)
        
        return (array - min_val) / (max_val - min_val)


    def computeSurvivalScore(self):

        density_scores = {}

        for k, bbox in self.center_points.items():

            indiv = self.getIndividualsAsArrays(bbox)

            total_mass = np.sum(indiv)
            if total_mass == 0: total_mass = 1e-9
            total_volume = np.count_nonzero(indiv)
            if total_volume == 0: total_volume = jnp.asarray([1])
            density_scores[k] = (total_mass / total_volume).item()
            self.survival_scores[k] = density_scores[k] - self.previous_survival_scores[k]
            self.previous_survival_scores[k] = density_scores[k]

        return density_scores

    def computeReproductionScore(self):

        for k, bbox in self.center_points.items():

            indiv = self.getIndividualsAsArrays(bbox)

            keys = [key for key in self.center_points.keys() if key != k]

            if len(keys) == 0: continue

            neighbour = self.getIndividualsAsArrays(self.center_points[random.choice(keys)])
            
            resized_target = self.resize_individual(indiv, neighbour.shape)

            similarity_score = self.calculate_similarity(neighbour, resized_target)
            
            self.accum_neighbour_scores[k] = (self.accum_neighbour_scores[k] + similarity_score) / 2

        common_keys = set(self.center_points.keys()) & set(self.accum_neighbour_scores.keys())

        self.accum_neighbour_scores = {key: self.accum_neighbour_scores[key] for key in common_keys}

        return self.accum_neighbour_scores

    def computeMorphologyScore(self):

        scores = {}

        for k, bbox in self.center_points.items():

            indiv = self.getIndividualsAsArrays(bbox)
            
            original = self.original_indivs[k]
            resized_target = self.resize_individual(indiv, original.shape)
            
            n_cross_corr = self.calculate_similarity(original, resized_target)

            scores[k] = n_cross_corr

        self.morphology_scores = scores

        return self.morphology_scores


    def calculate_similarity(self, image1, image2):

        # Convert arrays to JAX DeviceArrays
        image1 = jnp.asarray(image1)
        image2 = jnp.asarray(image2)

        # Check if the standard deviation is zero
        if jnp.std(image1) == 0 or jnp.std(image2) == 0:
            
            return 0.0  # Return a default similarity value when there is zero variance
        
        # Normalize the arrays
        arr1_norm = (image1 - jnp.mean(image1)) / jnp.std(image1)
        arr2_norm = (image2 - jnp.mean(image2)) / jnp.std(image2)
        
        # Compute the cross-correlation
        cross_corr = jnp.correlate(arr1_norm.flatten(), arr2_norm.flatten(), mode='same')

        # Compute the similarity
        similarity = jnp.max(cross_corr) / (jnp.linalg.norm(arr1_norm) * jnp.linalg.norm(arr2_norm))

        score = similarity.item()
        if type(score) != float:
            score = 0.0
    
        return score
    
    def align_images(self, image1, image2):
        """
        Align two input images using translation and rotation.
        
        Args:
            image1 (jnp.ndarray): First input image.
            image2 (jnp.ndarray): Second input image.
            
        Returns:
            jnp.ndarray: Aligned image (image2) after the alignment.
        """

        # Convert images to grayscale
        gray1 = jnp.mean(image1, axis=-1)
        gray2 = jnp.mean(image2, axis=-1)
        
        # Convert JAX DeviceArray to NumPy array
        gray1 = jnp.array(gray1)
        gray2 = jnp.array(gray2)
        
        # Calculate the rotation angle
        h, w = gray1.shape
        rotation_matrix = cv2.getRotationMatrix2D((w // 2, h // 2), 0, 1)
        
        # Convert the rotation matrix to NumPy array
        rotation_matrix = jnp.array(rotation_matrix)
        
        # Convert NumPy arrays back to JAX DeviceArray
        gray1 = jax.device_put(gray1)
        gray2 = jax.device_put(gray2)
        rotation_matrix = jax.device_put(rotation_matrix)
        
        # Perform the alignment
        aligned_image2 = cv2.warpAffine(gray2.get(), rotation_matrix.get(), (w, h))
        
        return aligned_image2
    
    def getIndividuals(self):

        return self.morphology_scores
    
    def getAllStatsFromKey(self, key):
        
        stats = {}

        try:
            stats["survival"] = self.survival_scores[key]
            stats["reproduction"] = self.accum_neighbour_scores[key]
            stats["morphology"] = self.morphology_scores[key]
        except KeyError:
            stats = {}

        return stats






system = System()

eel.init("web")



@eel.expose
def getParameters():

    data = system.getData()

    return data

@eel.expose
def setParameters(data):

    global system

    data["world"] = system.getInitialWorld()

    system.setData(data, 
                   from_seed = False)
    system.compile()

# REDUCE DUPLICATE CODE FROM SETPARAMETERS FUNCTION!!!
@eel.expose
def generateKernel(data):
    
    global system
    
    system.setData(data)
    system.generateRandomParams()
    system.compile()


@eel.expose
def step():

    global system
    system.step()

@eel.expose
def getWorld(visible_channels):

    Ac = system.world.A.clip(0, 1)[:, :, visible_channels]
    alpha = jnp.ones((system.world.sX, system.world.sY))
    while Ac.shape[-1] < 3:
        Ac = jnp.dstack((Ac, alpha * 0))
    res = jnp.dstack((Ac, alpha))
    res = jnp.uint8(res * 255.0).tolist()
    
    return res

@eel.expose
def getMassCenter():

    world = system.getCurrentWorld()
    min_size = 10 * 2

    # Sum the values along the last axis
    summed_world = np.sum(world, axis=-1)

    # Threshold the array
    mask = np.where(summed_world > 0, True, False)

    # Label the connected regions
    labels, num_features = ndimage.label(mask)

    # Count the number of non-zero values in each group
    counts = np.bincount(labels.ravel())
    
    # Find the bounding box of each region
    slices = ndimage.find_objects(labels)

    # Calculate the length of each bounding box
    lengths = [tuple(slice_.stop - slice_.start for slice_ in slice_tuple)
               for slice_tuple in slices]

    # Filter out regions that don't meet the minimum size threshold
    lengths = [(length[0] / world.shape[0], length[1] / world.shape[1]) for i, length in enumerate(
        lengths) if np.bincount(labels.ravel())[i+1] >= min_size]


    # Find the center of mass of each connected region that meets the minimum size threshold
    centers = np.array([ndimage.center_of_mass(summed_world, labels=labels, index=i) for i in range(1, num_features+1) if counts[i] >= min_size])

    centers = centers / world.shape[0]

    return centers.tolist(), lengths





def sample(name, new_data):

    entity = pattern[name]
    test = np.asarray(entity["cells"])
    
    test = test.transpose((1, 2, 0))
    SX = new_data["size"] = 64
    SY = SX
    C = new_data["numChannels"] = test.shape[-1]
    
    lst_B = [sublst['b'] for sublst in entity["kernels"]]
    max_rings = max(len(sublist) for sublist in lst_B)
        
    c1 = [[] for _ in range(C)]
    for kn in range(len(entity["kernels"])):
        c1[entity["kernels"][kn]["c1"]].append(kn)
    
    new_world = jnp.zeros((SX, SY, C))
    
    # print(new_world[SX//2-(test.shape[0])//2 :SX//2+(test.shape[0])//2, SY//2-(test.shape[1])//2:SY//2+(test.shape[1])//2, :].shape, test.shape
    new_world = new_world.at[SX//2-(test.shape[0] + 1)//2 :SX//2+(test.shape[0])//2, SY//2-(test.shape[1])//2:SY//2+(test.shape[1])//2, :].set(test)
    
    
    for k in "rmsh":
        temp = []
        for kernel in entity["kernels"]:
            temp.append(kernel[k])
        new_data[k] = np.asarray(temp, dtype=np.float64)
    
    new_data["world"] = new_world
    new_data['B'] = lst_B
    new_data['a'] = 0.5 * np.ones((len(entity["kernels"]), max_rings))
    new_data['a'] = new_data['a'].tolist()
    new_data['w'] = 0.15 * np.ones((len(entity["kernels"]), max_rings))
    new_data['w'] = new_data['w'].tolist()
    new_data['C'] = [kernel["c0"] for kernel in entity["kernels"]]
    new_data['T'] = c1
    new_data["dt"] = entity['T']
    new_data['version'] = entity["version"]

    return new_data


@eel.expose
def saveParameterState(imageData=None, filename="screenshot"):

    # filepath = os.path.join(os.getcwd(), filename + ".png")
    filepath_image = sample_images_path + '/' + filename + ".png"
    filepath_parameter = sample_parameters_path + '/' + filename + ".pickle"
    
    data = getParameters()
    data["world"] = system.getCurrentWorld()
    
    if imageData is None:
        with open(filepath_parameter, 'wb') as f:
            pickle.dump(data, f)
        return
    
    # Remove the "data:image/png;base64," prefix from the base64-encoded string
    image = imageData.split(",")[1]
    # Decode the base64-encoded string to bytes
    imageBytes = base64.b64decode(image)

    # Save the bytes to a file
    with open(filepath_image, "wb") as f:
        f.write(imageBytes)
    
    with open(filepath_parameter, 'wb') as f:
        pickle.dump(data, f)

@eel.expose
def loadParameterState(filename = "screenshot"):

    # filepath = os.path.join(os.getcwd(), filename + ".png")
    filepath_parameter = sample_parameters_path + '/' + filename + ".pickle"

    # load the dictionary from the file
    with open(filepath_parameter, 'rb') as f:
        data = pickle.load(f)
    
    system.setInitialWorld(data["world"])
    setParameters(data)

@eel.expose
def deleteSample(filename = "screenshot"):

    # filepath = os.path.join(os.getcwd(), filename + ".png")
    filepath_image = sample_images_path + '/' + filename + ".png"
    filepath_parameter = sample_parameters_path + '/' + filename + ".pickle"

    if os.path.exists(filepath_parameter) and os.path.exists(filepath_image):
         os.remove(filepath_parameter)
         os.remove(filepath_image)


@eel.expose
def getSampleNames():
    names = [os.path.splitext(filename)[0] for filename in os.listdir(
        sample_images_path) if os.path.isfile(os.path.join(sample_images_path, filename))]
    return list(names)


@eel.expose
def setSample(name, new_data):

    loadParameterState(name)
    return


@eel.expose
def test_new_window():
    
    return "Hi from Python"





@eel.expose
def getCoordinatesFromPython2():

    world = system.getCurrentWorld()
    min_size = 10 * 10

    # Sum the values along the last axis
    summed_world = np.sum(world, axis=-1)

    # Threshold the array
    mask = np.where(summed_world > 0, True, False)

    # Label the connected regions
    labels, num_features = ndimage.label(mask)

    # Count the number of non-zero values in each group
    counts = np.bincount(labels.ravel())

    # Find the center of mass of each connected region that meets the minimum size threshold
    centers = np.array([ndimage.center_of_mass(summed_world, labels=labels, index=i) for i in range(1, num_features+1) if counts[i] >= min_size])



    centers = centers / world.shape[0]

    return centers.tolist()


trackers = None

@eel.expose
def detectIndividuals():

    world = system.getCurrentWorld()
    min_size = 10 * 10

    # Sum the values along the last axis
    summed_world = np.sum(world, axis=-1)

    # Threshold the array
    mask = np.where(summed_world > 0, True, False)

    # Label the connected regions
    labels, num_features = ndimage.label(mask)

    # Count the number of non-zero values in each group
    counts = np.bincount(labels.ravel())
    
    # Find the bounding box of each region
    slices = ndimage.find_objects(labels)

    # Calculate the length of each bounding box
    lengths = [tuple(slice_.stop - slice_.start for slice_ in slice_tuple)
               for slice_tuple in slices]

    # Filter out regions that don't meet the minimum size threshold
    lengths = [(length[0] / world.shape[0], length[1] / world.shape[1]) for i, length in enumerate(
        lengths) if np.bincount(labels.ravel())[i+1] >= min_size]


    # Find the center of mass of each connected region that meets the minimum size threshold
    centers = np.array([ndimage.center_of_mass(summed_world, labels=labels, index=i) for i in range(1, num_features+1) if counts[i] >= min_size])

    boxes_list = []

    for [x, y], [w, h] in zip(centers, lengths):
        boxes_list.append([x, y, w, h])
    
    trackers = cv2.MultiTracker_create()

    for bbox in boxes_list:
        trackers.add(cv2.TrackerKCF_create(), world, bbox)

@eel.expose
def getCoordinatesFromPython():

    centers, world_size = system.getCoordinatesOfIndividuals()

    for k, v in centers.items():
        centers[k] = [v[0], #/ world_size,
                     v[1], #/ world_size,
                     v[2], # / world_size,
                     v[3] # / world_size
                     ]
    
    return centers





@eel.expose
def getGlobalSurvivalStats():

    data = system.computeSurvivalScore()
    
    return data

@eel.expose
def getGlobalReproductionStats():

    data = system.computeReproductionScore()
    
    return data

@eel.expose
def getGlobalMorphologyStats():

    data = system.computeMorphologyScore()
    return data


@eel.expose
def getIndividualsFromPython():

    return system.getIndividuals()

@eel.expose
def getAllStatsFromPython(id):

    return system.getAllStatsFromKey(id)




@eel.expose
def shutdown():
    sys.exit()


eel.start("index.html", mode="chrome-app", shtudown_delay = 2.0)




@eel.expose
def saveNStepsToVideo(nSteps):

    obs = np.zeros((nSteps, *system.world.A.shape))
    obs[0] = system.world.A
    
    params = eel.getParameters()()
    size = params["size"]
    seed = params["seed"]
    numChannels = params["numChannels"]
    ker_params = params["kernel_params"]
    # SCALE = 800 // sX
    sX = sY = size
    rand_gen = np.random.RandomState(seed)
    init_size = sX >> 2

